[{"id":5,"url":"/doc/ros2/Features/","title":"Features Status","content":"\nFeatures Status¶\nThe features listed below are available in the current ROS 2 release.\nUnless otherwise specified, the features are available for all supported platforms (Ubuntu 18.04, OS X 10.12.x, Windows 10), DDS implementations (eProsima Fast RTPS, RTI Connext and ADLINK Opensplice) and programming language client libraries (C++ and Python).\nFor planned future development, see the Roadmap.\n\n\n\n\n\n\n\nFunctionality\nLink\nFine print\n\n\n\nDiscovery, transport and serialization over DDS\nArticle\n\n\nSupport for multiple DDS implementations, chosen at runtime\nTutorials\nCurrently eProsima Fast RTPS, RTI Connext and ADLINK OpenSplice are fully supported.\n\nCommon core client library that is wrapped by language-specific libraries\nDetails\n\n\nPublish/subscribe over topics\nSample code, Article\n\n\nClients and services\nSample code\n\n\nSet/retrieve parameters\nSample code\n\n\nROS 1 - ROS 2 communication bridge\nTutorial\nAvailable for topics and services, not yet available for actions.\n\nQuality of service settings for handling non-ideal networks\nDemo\n\n\nInter- and intra-process communication using the same API\nDemo\nCurrently only in C++.\n\nComposition of node components at compile-, link- or dlopen-time\nDemo\nCurrently only in C++.\n\nSupport for nodes with managed lifecycles\nDemo\nCurrently only in C++.\n\nDDS-Security support\nDemo\n\n\nCommand-line introspection tools using an extensible framework\nTutorial\n\n\nLaunch system  for coordinating multiple nodes\nTutorial\n\n\nNamespace support for nodes and topics\nArticle\n\n\nStatic remapping of ROS names\nTutorial\n\n\nDemos of an all-ROS 2 mobile robot\nDemo\n\n\nPreliminary support for real-time code\nDemo, demo\nLinux only. Not available for Fast RTPS.\n\nPreliminary support for “bare-metal” microcontrollers\nWiki\n\n\n\n\nBeside features of the platform the most impact of ROS comes from its available packages.\nThe following are a few high profile packages which are available in the latest release:\n\ngazebo_ros_pkgs\nimage_transport\nnavigation2\nrosbag2\nRQt\nRViz2\n\n\n"},{"id":6,"url":"/doc/ros2/Installation/","title":"Installation","content":"\nInstallation¶\n\n\n\nROS 2 Installation Options¶\nMultiple distributions of ROS 2 are supported at a time.\nDifferent distributions may be supported for longer time periods or may provide support for more recently released platforms.\nFor ROS 2 we recommend using the most recent release available when possible.\n\nSelect your ROS distribution¶\n\n\n\n\n\n\n\nROS 2 Bouncy Bolson\nROS 2 Crystal Clemmys\nROS 2 Dashing Diademata\n\nReleased July 2018\nReleased December 2018\nTo be released May 2019 (In progress)\n\nSupported until July 2019\nSupported until December 2019\nSupported until May 2021\n\n\n\nFor more detailed descriptions of each release see REP-2000\n\n\n\n"},{"id":7,"url":"/doc/ros2/Releases/","title":"ROS 2 Distributions","content":"\nROS 2 Distributions¶\n\nWhat is a Distribution?¶\nSee wiki.ros.org/Distributions.\n\n\nList of Distributions¶\n\n\n\n  .distros td {border: 0px;}\n  .distros tbody tr {background-color: #c0c0c0;}\n  .distros tbody tr:nth-child(1), .distros tbody tr:nth-child(2) {background-color: #33cc66;}\n  .distros td {vertical-align: middle;}\n\n\n\n\n\n\n\n\nDistro\nRelease date\nLogo\nEOL date\n\n\n\nCrystal Clemmys\nDecember 14th, 2018\n\nDec 2019\n\nBouncy Bolson\nJuly 2nd, 2018\n\nJul 2019\n\nArdent Apalone\nDecember 8th, 2017\n\nDec 2018\n\nbeta3\nSeptember 13th, 2017\n\nDec 2017\n\nbeta2\nJuly 5th, 2017\n\nSep 2017\n\nbeta1\nDecember 19th, 2016\n\nJul 2017\n\nalpha1 - alpha8\nAugust 31th, 2015\n\nDec 2016\n\n\n\n\nDistribution Details¶\nFor details on the distributions see each releases page.\nFor the supported platforms and versions of common dependencies and other considerations, see the official ROS 2 Target Platforms REP 2000.\n\n\n\nFuture Distributions¶\nFor details on upcoming features see the roadmap.\nCurrently there is a new ROS 2 distribution roughly every 6 months.\nThe following information are best estimates and are subject to change.\n\n  .future-distros td {vertical-align: middle;}\n\n\n\n\n\n\n\n\nDistro\nRelease date\nSupported for\nPlanned changes\n\n\n\nDashing Diademata\nMay 31st, 2019\n2 years\n\n\n<E-turtle>\nNovember 22nd, 2019\n1 year\n\n\n<F-turtle>\nMay 2020\n3+ years\nTarget Ubuntu 20.04\n\n\n\nAfter F-turtle the expectations is to release new ROS 2 distributions once per year.\n\n\n"},{"id":8,"url":"/doc/ros2/Related-Projects/","title":"Related Projects","content":"\nRelated Projects¶\n\n\nIntel ROS2 Projects\n\n\n\n"},{"id":9,"url":"/doc/ros2/Roadmap/","title":"Roadmap","content":"\nRoadmap¶\n\nTable of Contents\n\nFeature ideas in no specific order\n\nDesign / Concept\nInfrastructure and tools\nNew features\nPort of existing ROS 1 functionality\nReducing Technical Debt\n\n\n\n\nPlease see the page of the upcoming distribution Dashing Diademata for more information what is planned to be part of that release.\nPlease see the Distributions page for the timeline of and information about future distributions.\nFor more information on the design of ROS 2 please see design.ros2.org.\nThe core code for ROS 2 is on the ros2 github organization.\nThe Discourse forum/mailing list for discussing ROS 2 design is ng-ros.\nQuestions should be asked on ROS answers, make sure to include at least the ros2 tag and the rosdistro version you are running, e.g. ardent.\n\nFeature ideas in no specific order¶\n\nDesign / Concept¶\n\nIDL format: using IDL 4.2 to specify ROS interfaces (msgs, srvs, actions)\n\nSupport for non-ASCII strings in messages / services\nLeverage new features like grouping and various annotations (comments, units)\nExtend usage to .idl files with just constants and/or declare parameters with ranges\n\n\nProgress on migration plan\nReconsider 1-to-1 mapping of ROS nodes to DDS participants\nUniqueness of node names\noptional XML or YAML frontend for Python-based launch\n\n\n\nInfrastructure and tools¶\n\nBuilding\n\nSupport to generate “fat” packages / archives\nWindows and Mac OS packages\n\n\nDocumentation\n\nImprove documentation platform\nSupport for doc jobs on the ROS 2 buildfarm\nConsider consolidating with design.ros2.org\nProvide three different kinds of content:\n\n“demos” to show features and cover them with tests\n“examples” to show a simple/minimalistic usage which might have multiple ways to do something\n“tutorials” which contain more comments and anchors for the wiki (teaching one recommended way)\n\n\n\n\n\n\n\nNew features¶\nThe trailing stars indicate the rough effort: 1 star for small, 2 stars for medium, 3 stars for large.\n\nActions in Python\nLogging improvements [* / **]\n\nConfiguration specified in a file\nC++ stream operators\nColorize console output\n\n\nParameters\n\nset individual parameters via command line arguments (instead of passing a yaml file)\nSpecify the value range\nDefine read-only parameters\n\n\nAdditional Graph API features [** / ***]\n\na la ROS 1 Master API: http://wiki.ros.org/ROS/Master_API\nEvent-based notification\nRequires knowledge of the rmw interface which needs to be extended\n\n\nRemapping [** / ***]\n\nDynamic remapping and aliasing through a Service interface\n\n\nType masquerading [***]\n\na la ROS 1’s message traits: http://wiki.ros.org/roscpp/Overview/MessagesSerializationAndAdaptingTypes\nRequires knowledge of the typesupport system\n\n\nExpand on real-time safety [***]\n\nWith FastRTPS\nFor services, clients, and parameters\nSupport deterministic ordering of executables in Executor (fair scheduling)\nExpose more quality of service parameters related to real-time performance\nReal-time-safe intra-process messaging\n\n\nMulti-robot supporting features and demos [***]\n\nUndesired that all nodes across all robots share the same domain (and discover each other)\nDesign how to “partition” the system\n\n\nImplement C client library rclc [**]\nSupport more DDS / RTPS implementations:\n\nConnext dynamic [*]\nRTI’s micro implementation [*]\nEclipse Cyclone DDS (former ADLINK OpenSplice) [*]\n\n\nsecurity improvements:\n\nmore granularity in security configuration (allow authentication only, authentication and encryption, etc) [*]\nextend access control permission generation to support services [*]\nintegrate DDS-Security logging plugin (unified way to aggregate security events and report them to the users through a ROS interface) [**]\nkey storage security (right now, keys are just stored in the filesystem) [**]\nmore user friendly interface (make it easier to specify security config). Maybe a Qt GUI? This GUI could also assist in distributing keys somehow. [***]\nA way to say “please secure this running system” with some UI that would auto-generate keys and policies for everything that is currently running. [***]\nIf there are hardware-specific features for securing keys or accelerating encryption/signing messages, that could be interesting to add to DDS/RTPS implementations that don’t use it already. [***]\n\n\n\n\n\nPort of existing ROS 1 functionality¶\n\nPerception metapackage\n\nImage pipeline\nImprovements to the intra process comm. to reduce latency / overhead\n\n\nMoveIt\n\nNeeds Actions\nMoveit Maintainers are tracking: https://discourse.ros.org/t/moveit-maintainer-meeting-recap-july-25th-2018/5504\n\n\nRQt\n\nconvert more plugins [* each when dependencies are available]\n\n\nDiagnostics\n\n\n\nReducing Technical Debt¶\n\nExtend testing and resolve bugs in the current code base\n\nWaitset inconsistency\nMulti-threading problems with components\nReduce overhead / latency of intra-process communication\n\n\nFix flaky tests.\nAbility to run (all) unit tests with tools e.g. valgrind\nAPI review\nSynchronize / reconcile design docs with the implementation.\n\nPre-release retrospective review (APIs, docs, etc.)\n\n\nAddress / classify pending tickets\nAddress TODOs in code / docs\n\n\n\n\n"}]