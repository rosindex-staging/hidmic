[{"id":15,"url":"/doc/ros2/Releases/Beta1-Overview/","title":"Beta 1 (codename ‘Asphalt’; December 2016)","content":"\nBeta 1 (codename ‘Asphalt’; December 2016)¶\n\nTable of Contents\n\nSupported Platforms\nFeatures\n\nImprovements since Alpha 8 release\nSelected features from previous Alpha releases\nKnown issues\n\n\n\n\n\nSupported Platforms¶\nWe support ROS 2 Beta 1 on three platforms: Ubuntu 16.04 (Xenial), Mac OS X 10.11 (El Capitan), and Windows 8.1 and 10. We provide both binary packages and instructions for how to compile from source for all 3 platforms.\n\n\nFeatures¶\n\nImprovements since Alpha 8 release¶\n\nSupport for node composition at compile, link, or runtime.\nA standard lifecycle for managed nodes.\nImproved support for Quality of Service tuning and tests.\nNew and updated design documents\nMore tutorials and examples\nBridging services to / from ROS1 (in addition to topics)\n\n\n\nSelected features from previous Alpha releases¶\nFor the complete list, see earlier release notes.\n\nC++ and Python implementations of ROS 2 client libraries including APIs for:\n\nPublishing and subscribing to ROS topics\nRequesting and replying ROS services (synchronous (C++ only) and asynchronous)\nGetting and setting ROS parameters (C++ only, synchronous and asynchronous)\nTimer callbacks\nSupport for interoperability between multiple DDS/RTPS implementations\neProsima FastRTPS is our default implementation, and is included in the binary packages\nRTI Connext is supported: build from source to try it out\nWe initially supported PrismTech OpenSplice but eventually decided to drop it\n\n\nA graph API for network events\nDistributed discovery\nRealtime safe code paths for publish and subscribe with compatible DDS implementation (only Connext at the moment)\n\nSupport for custom allocators\n\n\nROS 1 <-> ROS 2 dynamic bridge node\nExecutor threading model in C++\nExtended .msg format with new features:\n\nBounded arrays\nDefault values\n\n\n\n\n\nKnown issues¶\n\nWe’re tracking issues in various repositories, but the main entry point is the ros2/ros2 issue tracker\nWe’d like to highlight a known issue that we are working with eProsima to fix that results in significantly degrated performance for large messages under FastRTPS.\nThis will be observed when running some of the demos with larger image resolutions.\n\n\n\n\n"},{"id":16,"url":"/doc/ros2/Releases/Beta2-Overview/","title":"Beta 2 (codename ‘r2b2’; July 2017)","content":"\nBeta 2 (codename ‘r2b2’; July 2017)¶\n\nTable of Contents\n\nSupported Platforms\nFeatures\n\nImprovements since Beta 1 release\nNew demo application\nSelected features from previous Alpha/Beta releases\nKnown issues\n\n\n\n\n\nSupported Platforms¶\nWe support ROS 2 Beta 2 on three platforms: Ubuntu 16.04 (Xenial), Mac OS X 10.12 (Sierra), and Windows 10.\nWe provide both binary packages and instructions for how to compile from source for all 3 platforms (see install instructions as well as documentation).\n\n\nFeatures¶\n\nImprovements since Beta 1 release¶\n\nDDS_Security support (aka SROS2, see sros2)\nDebian packages for Ubuntu Xenial (see Debian install instructions).\nTypesupport has been redesigned so that you only build a single executable and can choose one of the available RMW implementations by setting an environment variable (see documentation).\nNamespace support for nodes and topics (see design article, see known issues below).\nA set of command-line tools using the extensible ros2 command (see tutorial).\nA set of macros for logging messages in C / C++ (see API docs of rcutils).\n\n\n\nNew demo application¶\n\nTurtlebot 2 demos using the following repositories that have been (partially) converted to ROS 2 (Linux only):\n\nros_astra_camera\ndepthimage_to_laserscan\npcl_conversions\ncartographer\ncartographer_ros\nceres-solver\nnavigation\nteleop_twist_keyboard\njoystick_drivers\nteleop_twist_joy\n\n\nDummy_robot demo:\n\nrobot_model\nrobot_state_publisher\n\n\n\n\n\nSelected features from previous Alpha/Beta releases¶\nFor the complete list, see earlier release notes.\n\nC++ and Python implementations of ROS 2 client libraries including APIs for:\n\nPublishing and subscribing to ROS topics\nRequesting and replying ROS services (synchronous (C++ only) and asynchronous)\nGetting and setting ROS parameters (C++ only, synchronous and asynchronous)\nTimer callbacks\n\n\nSupport for interoperability between multiple DDS/RTPS implementations\n\neProsima FastRTPS is our default implementation, and is included in the binary packages\nRTI Connext is supported: build from source to try it out\nWe initially supported PrismTech OpenSplice but support for it is currently on hold\n\n\nA graph API for network events\nDistributed discovery\nRealtime safe code paths for publish and subscribe with compatible DDS implementation (only Connext at the moment)\n\nSupport for custom allocators\n\n\nROS 1 <-> ROS 2 dynamic bridge node\nExecutor threading model (C++ only)\nComponent model to compose nodes at compile / link / runtime\nManaged component using a standard lifecycle\nExtended .msg format with new features:\n\nBounded arrays\nDefault values\n\n\n\n\n\nKnown issues¶\n\nWe’re tracking issues in various repositories, but the main entry point is the ros2/ros2 issue tracker\nWe’d like to highlight a known issue that we are looking into which doesn’t allow two topics with the same base name but different namespaces to have a different type when using rmw_connext_cpp.\nServices with long responses are not working with Fast-RTPS. The fix, while not being part of beta2, is available upstream so you can work around this issue by building from source using Fast-RTPS master branch.\n\n\n\n\n"},{"id":17,"url":"/doc/ros2/Releases/Beta3-Overview/","title":"Beta 3 (codename ‘r2b3’; September 2017)","content":"\nBeta 3 (codename ‘r2b3’; September 2017)¶\n\nTable of Contents\n\nSupported Platforms\nFeatures\n\nImprovements since Beta 2 release\nNew demo application\nSelected features from previous Alpha/Beta releases\n\n\nKnown issues\n\n\n\nSupported Platforms¶\nWe support ROS 2 Beta 3 on three platforms: Ubuntu 16.04 (Xenial), Mac OS X 10.12 (Sierra), and Windows 10.\nWe provide both binary packages and instructions for how to compile from source for all 3 platforms (see install instructions as well as documentation).\n\n\nFeatures¶\n\nImprovements since Beta 2 release¶\n\nExecution model in Python, many fixes to memory management in Python C extension\nExperimental rewrite of ros_control\nExposure of DDS implementation-specific symbols to users (for FastRTPS and Connext) (see example)\nLogging API in Python\nFixed several memory leaks and race conditions in various packages\nReadded support for OpenSplice (on Linux and Windows atm) provided by PrismTech\nUse bloom (without patches) to make ROS 2 releases\n\n\n\nNew demo application¶\n\nHSR demo\n\nRemote control a HSR robot using a ROS 2 joystick controller\nRunning the ros1_bridge in a Docker container on the HSR (since the robot is running ROS 1 on Ubuntu Trusty)\nRun a ROS 2 development version of rviz to visualize sensor data from the robot etc. (see video)\n\n\n\n\n\nSelected features from previous Alpha/Beta releases¶\nFor the complete list, see earlier release notes.\n\nC++ and Python implementations of ROS 2 client libraries including APIs for:\n\nPublishing and subscribing to ROS topics\nRequesting and replying ROS services (synchronous (C++ only) and asynchronous)\nGetting and setting ROS parameters (C++ only, synchronous and asynchronous)\nTimer callbacks\n\n\nSupport for interoperability between multiple DDS/RTPS implementations\n\neProsima FastRTPS is our default implementation, and is included in the binary packages\nRTI Connext is supported: build from source to try it out\nPrismTech OpenSplice: see limitations below\n\n\nA graph API for network events\nDistributed discovery\nRealtime safe code paths for publish and subscribe with compatible DDS implementation (only Connext at the moment)\n\nSupport for custom allocators\n\n\nROS 1 <-> ROS 2 dynamic bridge node\nExecutor threading model (C++ and Python)\nComponent model to compose nodes at compile / link / runtime\nManaged component using a standard lifecycle\nExtended .msg format with new features:\n\nBounded arrays\nDefault values\n\n\n\n\n\n\nKnown issues¶\n\nOn Windows Python launch files might hang when trying to abort using Ctrl-C (see issue). In order to continue using the shell which is blocked by the hanging command you might want to end the hanging Python process using the process monitor.\nOpenSplice support is currently not available for MacOS. Also access to native handles is not yet implemented.\nUsing Connext it is currently not allowed for two topics with the same base name but different namespaces to have a different type (see issue).\n\n\n\n"},{"id":18,"url":"/doc/ros2/Contributing/Build-Cop-and-Build-Farmer-Guide/","title":"Build Cop and Build Farmer Guide","content":"\nBuild Cop and Build Farmer Guide¶\n\nTable of Contents\n\nOn-boarding\nRetirement\nBuild Cop\n\nMission\nBuild Cop Tasks\n\n\nBuild Farmer\n\nMission\nBuild Farmer Tasks\nResources\n\n\n\n\nThis page covers two rotating developer roles we have on the ROS 2 team, the build cop and the build farmer.\nThese two roles are related, but subtly different.\nThe build cop is responsible for monitoring our Continuous Integration (CI) server to make sure our “nightly” jobs and “packaging” jobs do not accumulate new regressions.\nThis allows us to build on relatively stable “ci” (or “manual”) jobs when checking to see if a new feature or bug fix introduces any new regressions.\nThe build farmer, on the other hand, is responsible for ensuring that the machines that run all of our CI jobs are up, running, and up-to-date, so that they are available for other developers to check their pull requests.\nThese two jobs have so far been the same person for periods of about two weeks, but they are separated here so that they could be different people in the future and to make a distinction between the roles and responsibilities.\nThis document is meant mostly for ROS 2 team developers, but it might be useful for others too.\n\nOn-boarding¶\nIf you are becoming the next build cop or build farmer you should:\n\nMake sure you are subscribed to and have the “deliver every email” option turned on for this mailing list:\n\nhttps://groups.google.com/forum/#!forum/ros2-buildfarm\n\n\nMake sure you are “watching” this GitHub repository:\n\nhttps://github.com/ros2/build_cop\n\n\nTalk with the previous build cop and/or build farmer about on-going issues\nUpdate the description of the main view on Jenkins to the current date and your name:\n\nhttp://ci.ros2.org/\n\n\n\n\n\nRetirement¶\nIf you are finishing your stint as either build cop or build farmer you should:\n\nUnsubscribe or switch to “digest” for this mailing list:\n\nhttps://groups.google.com/forum/#!forum/ros2-buildfarm\n\n\n“Unwatch” this GitHub repository:\n\nhttps://github.com/ros2/build_cop\n\n\nSummarize the on-going issues for the next build cop or build farmer to which you are handing off\n\n\n\nBuild Cop¶\nThis section assumes that you have reviewed the ROS 2 on boarding document.\n\nMission¶\nThe goal of the build cop is to keep the jobs “green” (succeeding without test failures or warnings) on the buildfarm and to report any regression to the appropriate person.\nThis will reduce the overhead of several people looking at, or investigating, the same build failures.\nThis will also allow the other people on the team not to receive nightly email for the failing and/or unstable builds.\n\n\nBuild Cop Tasks¶\nEvery morning the build cop should go through all the nightly jobs and packaging jobs and act on new failing or unstable jobs.\nThe “ci” jobs, which are started manually by developers, are not the responsibility of the build cop unless all “ci” are failing, which would indicate something was merged to the default branches which is broken.\nHow to classify and deal with new failures is described in the next section.\nAdditionally, the build cop should strive to keep track of existing issues which are either preexisting or cannot be resolved with a day or so.\nIssues are tracked on this repository which only the build cop must be “watching” (getting GitHub notifications), though anyone interested can follow it too:\nhttps://github.com/ros2/build_cop/issues\nThe above repository is also used to track Build Farmer issues.\nIt is meant to be a way for the build cop or build farmer to track long running items for handing off to the next person and so they can “mention” individuals on particular issues without the whole team getting notified of every issue.\n\nTypes of Failures¶\nEach failure can be categorized into one of a few classifications:\n\nNode failure:\n\nfailures which appear to be due to a machine configuration and not a code change\npass it on to the build farmer\n\n\nTrivial failure:\n\nLinter failure\nNew warnings\n\n\nCritical failure:\n\nBreaking builds on the “default” branch\nRegression (existing tests which were passing are now failing)\nNew tests that are failing (never were passing)\n\n\nImportant failure:\n\nNew feature which is not fully covered by tests\nIncrease flakiness (new flaky tests or made existing flaky tests more flaky)\n\n\n\n\n\nNew Failure Actions¶\nIn each case different actions should be taken by the build cop:\n\nTrivial failure should be fixed by the Build Cop right away:\n\nPushed on a branch\nTested on CI\nMerged to the default branch\nAdd a comment to the PR introducing the failure referencing the fixing commit\n\n\nCritical failures:\n\nFailure should be reported on the PR introducing it by tagging the submitter and the reviewer that +1’d it.\nSubmitter of the PR has to act on it during the next half day by either:\n\nReverting the change and ticketing the problem / comment on the PR the reason it’s been reverted\nSubmit a patch to fix the failure\n\n\n\n\nImportant failures:\n\nFailure should be reported on the PR introducing it by tagging the submitter + the reviewer the +1’d it.\nSubmitter has to either:\n\nAddress it the same week\nAdd it to the next sprint\n\n\n\n\n\n\n\nTips¶\n\nYou can search for PRs merged between two dates with, e.g.:\n\nhttps://github.com/search?utf8=%E2%9C%93&q=user%3Aament+user%3Aros2+merged%3A%222017-04-17T22%3A00%3A00-08%3A00+..+2017-04-18T23%3A30%3A00-08%3A00%22&type=Issues\n(note that FastRTPS and other external repos won’t appear)\n\n\nTo get the exact list of code that changed, generate a diff between the output of vcs export --exact between two builds.\n\nThis is particularly useful for external repos such as FastRTPS where old commits may get pushed to the master branch overnight, and are difficult to spot in the GitHub UI.\n\n\nTimes displayed at the top of jenkins jobs are in UTC. You can convert the times with e.g.:\n\nhttps://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=when+it’s+9:25:12+PM+UTC+time+pst\n\n\nIf linter failures occur overnight it is usually because of a new version of a linter.\n\nCreate a diff of the last pip freeze output of two builds to see which versions changed.\nIf it’s a regression in a dependency you can pin the older version temporarily, see this PR for an example.\n\n\n\n\n\n\n\nBuild Farmer¶\nThis section assumes that you have reviewed the ROS 2 on boarding document.\n\nMission¶\nThe mission of the build farmer is to keep the build farm in a healthy, up-to-date state.\nIdeally all Jenkins nodes will have the same/latest version of every package.\nThis will require monitoring and patching up any node when things come up.\n\n\nBuild Farmer Tasks¶\n\nMonitor the buildfarm (using the https://groups.google.com/forum/#!forum/ros2-buildfarm mailing list for email notifications)\nTake failing nodes off-line with descriptive message about the issue and investigate the failure ASAP.\n\nTaking a node off-line:\n\nlog in ci.ros2.org\nclick on the node in the left column of Jenkins UI (e.g. osx_slave_mini1)\nclick on “Mark this node temporary off-line” button (top right corner)\n\n\nInvestigate the failure (see section below)\n\n\nReport error and fixing attempt using the Build Farmer Reporting Form\n\nIf the same problem and action is taken on multiple nodes, select all the relevant nodes in the form before submitting it\n\n\nIf fixing attempt failed:\n\nKeep the node off-line on the farm\nUpdate the reason for node being off-line\nPut the status and error message in the status sheet of the logbook\nAllocate time in the next few days to dive in the problem\n\n\nIf you rescue a previously off-line node:\n\nUpdate the status sheet of the logbook by:\n\nRemoving the error message in the status column\nUpdate the date next to it\n\n\n\n\nOnce investigation is finished, clean the machine: close all your windows, stash or remove any local changes\n\nRationale\n\nAnybody logging into the machine need to know that no one is working on it\nIf the machine reboots the machine needs to be in an operational state without local changes\n\n\n\n\nMaking sure install instructions are up to date\nUse the existing logbook to put together an FAQ or best practice to rescue nodes\n\n\nHow to Investigate a Failing Node¶\nIf the node failed to build, look at the console output of the failing build:\n\nClick on the link of the failing job received by email or go to ci.ros2.org and click on the number (e.g. #2345) next to the failing job(red icon).\nClick on Console Output in the left column\nLook for the reason of the failure\nIf the failure is not due to a machine configuration, relay to the build cop\n\nIf you need to access a machine:\n\nSee this spreadsheet (private) for credentials for all the different Jenkins Nodes:\nFor machines hosted at OSRF, you’ll need to be on the OSRF network or have a VPN connection.\nFor machines which require ssh keys ask on ros@osrfoundation.org for your public keys to be added.\nThe Packet.net nodes (with “packet” in the name):\n\nCan be managed by logging in at https://packet.net with <brian’s email address>/<the usual company password>\n\nThis will change after we set up a team account to manage servers.\n\n\nCan be accessed with Tully’s or Brian’s ssh key.\n\nThis will change after we set up a team account to manage servers.\n\n\n\n\n\n\n\nTroubleshooting¶\nIf a node goes off-line:\n\nFor machines with VNC, you should try that first because many failures can be due to pop-up windows or required updates\nIf you don’t have any pop-ups and relaunching the jenkins client doesn’t fix it, then you’ll have to start troubleshooting.\nLooking at configuration difference between the nodes may be useful (java version, pip freeze, etc.)\nFor Linux nodes that have gone off-line (e.g. because of a reboot), they can be reconnected through the Jenkins web interface of that node\n\nOther tips:\n\nThe environment variables on Windows machines are output at the beginning of Jenkins jobs (search for ==> set).\nIf you are modifying environment variables on Windows nodes, you may need to restart the machine before the changes are reflected in the jobs.\nThis is due to the Jenkins slave session caching the environment variables to some degree.\n\nOn the Windows machines, the Jenkins slave program runs as a service as the System account.\nFor this user, the “home” directory seems to be C:\\Windows\\system32\\config\\systemprofile.\nYou can “become” the system user to debug stuff by downloading pxexec:\nhttps://technet.microsoft.com/en-us/sysinternals/pxexec\nThen you extract the zip, then open a command-prompt as administrator, and then run psexec -i -s cmd.exe.\nThis is all pieced together from a couple of pages here:\nhttp://blog.thomasvandoren.com/jenkins-windows-slave-with-git.html\nand here:\nhttps://answers.atlassian.com/questions/128324/where-is-the-home-directory-for-the-system-user\n\nEvery so often the router reboots. The mac machines usually don’t reconnect to Jenkins properly. Just manually reconnect them.\n\n\n\nResources¶\n\n\nHow to setup the Jenkins master\nHow to setup Linux Jenkins nodes\nHow to setup a macOS Jenkins node\nHow to setup a Windows Jenkins node\n\n\n\n\n\n"},{"id":19,"url":"/doc/ros2/Tutorials/Building-ROS-2-on-Linux-with-Eclipse-Oxygen/","title":"Building ROS2 on Linux with Eclipse Oxygen [community-contributed]","content":"\nBuilding ROS2 on Linux with Eclipse Oxygen [community-contributed]¶\n\nWarning\nSome people have reported issues about this tutorial.\nIf the steps work for you please leave a comment on https://github.com/ros2/ros2/issues/495 .\nIf they don’t then please comment with the first step that didn’t work.\n\nThis tutorial is based on a clean ubuntu-16.04.2 install and eclipse oxygen with egit. It uses RTI Connext as middleware for Realtime performance. The original Install page is perhaps more up-to-date, so check it for info.\nInstall:\nsudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu `lsb_release -cs` main\" > /etc/apt/sources.list.d/ros-latest.list'\nsudo apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 421C365BD9FF1F717815A3895523BAEEB01FA116\n\n\nsudo apt update\nsudo apt install git wget build-essential cppcheck cmake libopencv-dev python-empy python3-dev python3-empy python3-nose python3-pip python3-pyparsing python3-setuptools python3-vcstool python3-yaml libtinyxml-dev libeigen3-dev clang-format pydocstyle pyflakes python3-coverage python3-mock python3-pep8 uncrustify libasio-dev libtinyxml2-dev libcurl4-openssl-dev libqt5core5a libqt5gui5 libqt5opengl5 libqt5widgets5 libxaw7-dev libgles2-mesa-dev libglu1-mesa-dev qtbase5-dev\n\n\nThen install\nsudo pip3 install argcomplete flake8 flake8-blind-except flake8-builtins flake8-class-newline flake8-comprehensions flake8-deprecated flake8-docstrings flake8-import-order flake8-quotes pytest pytest-cov pytest-runner\n\n\nCreate a eclipse workspace named ros2_ws. (The name is not needed to be ros2_ws)\n\nInside this eclipse-workspace we create a C++ Project. With this option we have a indexer for code-completion.\n\nWe name the project ros2_ws\n\nWe see our project and some includes. These includes dont reside in our workspace, so dont remove, they are for the indexer.\n\nWe create a folder inside our project, named “src”\n\nWe see the folder in our project. This folder also exist in our workspace.\nAfter that we go to a console and switch to directory /home/ros/ros2_ws/ros2_ws there we enter\nwget https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos\nvcs-import src < ros2.repos\n\n\nadd export RTI_LICENSE_FILE=/home/ros/rti_connext_dds-5.3.1/rti_license.dat to .bashrc and source it.\n\nWe now need a RTI license, which we get on their website. Refer to Linux Development Setup page. The RTI license file will be directly send per email after sign-up.\nIn the email is a link to the RTI software to download. We run the .run file after chmod +x\n\n\nWe choose our home directory to install\n\n\n\nIn the Launcher which started, we select our RTI license file and copy it global\n\nselect in the down-left side the install-button\n\ninstall the security package from RTI software\n\nand the openssl package\n\nUnpack the openssl-1.0.2n package and copy it to the RTI install directory. source /home/ros/rti_connext_dds-5.3.1/resource/scripts/rtisetenv_x64Linux3gcc5.4.0.bash on a console and export RMW_IMPLEMENTATION=rmw_connext_cpp.\nClose eclipse-IDE and open it from the shell we sourced all the scripts from above.We now open in Eclipse the Project->Preferences and go to Environment.\n\nWe enter environment variables. We can get the vars simply by opening a bash console, then we run “env > /tmp/out”, then source the ROS 2 local_setup.bash, then “env > /tmp/out1” and “diff /tmp/out /tmp/out1”. The output that diff is showing, is what we enter in eclipse environment vars, so that eclipse knows about e.g. the new PATH var.\n\n\nThen we go to Builders and click the “New” button.\n\nWe enter the amen.py settings\n\nAfter that we unselect CDT-Builder\n\nThen we go to C++ Build and delete the build command make, because we use ament.py (Dont know really if this is needed\nas we disabled CDT-Builder before?)\n\nWe now can right-click and run “Build Project”.\nHINT if it happens:\nerror: NDDSHOME set to  but could neither find   all optimized libraries nor all debug libraries\nI deleted dir /home/ros/rti_connext_dds-5.3.1/lib/x64Linux3gcc5.4.0/5.3.1/5.3.1  with doubled libs\n\nWe can then open two console, source ros2_ws/install/local_setup.bash in both consoles and run talker and listener\n\nWe see our Project in eclipse, go to git-repositories-view and import local repo\n\nWe select our directory and select the repository we are interresting in seeing e.g. git-infos like author of code-line, or switching to other branches, etc.\n\nAfter adding the git-repo to the git-repository-view, we can right-click on it and select “Import projects”\n\nThe import source is the directory of our project\n\nWe see in the down-left side in the project-explorer view, that this project is beside our ros2_ws project. But they both use the same files.But one is linked with Egit and can show git-annotations, etc. the other not. So open files from the project which is linked to Egit.\n\nFile linked with Egit. Right-click beside the line-number in the editor and choose “Show Revision information” from the pop-up dialog, then you could see e.g. the author, and other stuff like commit message if you hover over it with the mouse.\n\n\n"}]