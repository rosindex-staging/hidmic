[{"id":70,"url":"/doc/ros2/Tutorials/dummy-robot-demo/","title":"Trying the dummy robot demo","content":"\nTrying the dummy robot demo¬∂\nIn this demo, we present a simple demo robot with all components from publishing joint states over publishing fake laser data until visualizing the robot model on a map in RViz.\n\nLaunching the demo¬∂\nWe assume your ROS2 installation dir as ~/ros2_ws. Please change the directories according to your platform.\nTo start the demo, we execute the demo bringup launch file, which we are going to explain in more details in the next section.\nsource ~/ros2_ws/install/setup.bash\nros2 launch dummy_robot_bringup dummy_robot_bringup.launch.py\n# For ROS 2 releases prior to Bouncy, instead run:\n# launch ~/ros2_ws/install/share/dummy_robot_bringup/launch/dummy_robot_bringup.py\n\n\nYou should see some prints inside your terminal along the lines of the following:\n[INFO] [launch]: process[dummy_map_server-1]: started with pid [25812]\n[INFO] [launch]: process[robot_state_publisher-2]: started with pid [25813]\n[INFO] [launch]: process[dummy_joint_states-3]: started with pid [25814]\n[INFO] [launch]: process[dummy_laser-4]: started with pid [25815]\nInitialize urdf model from file: /home/mikael/work/ros2/bouncy_ws/install_debug_isolated/dummy_robot_bringup/share/dummy_robot_bringup/launch/single_rrbot.urdf\nParsing robot urdf xml string.\nLink single_rrbot_link1 had 1 children\nLink single_rrbot_link2 had 1 children\nLink single_rrbot_link3 had 2 children\nLink single_rrbot_camera_link had 0 children\nLink single_rrbot_hokuyo_link had 0 children\ngot segment single_rrbot_camera_link\ngot segment single_rrbot_hokuyo_link\ngot segment single_rrbot_link1\ngot segment single_rrbot_link2\ngot segment single_rrbot_link3\ngot segment world\nAdding fixed segment from world to single_rrbot_link1\nAdding moving segment from single_rrbot_link1 to single_rrbot_link2\n[INFO] [dummy_laser]: angle inc:    0.004363\n[INFO] [dummy_laser]: scan size:    1081\n[INFO] [dummy_laser]: scan time increment:  0.000028\nAdding moving segment from single_rrbot_link2 to single_rrbot_link3\nAdding fixed segment from single_rrbot_link3 to single_rrbot_camera_link\nAdding fixed segment from single_rrbot_link3 to single_rrbot_hokuyo_link\n\n\nIf you now open in a next terminal your RViz, you‚Äôll see your robot. üéâ\n$ source <ROS2_INSTALL_FOLDER>/setup.bash\n$ rviz2\n\n\nThis opens RViz2. Assuming you have your dummy_robot_bringup still launched, you can now add the TF display plugin and configure your global frame to world. Once you did that, you should see a similar picture:\n\n\nWhat‚Äôs happening?¬∂\nIf you have a closer look at the launch file, we start a couple of nodes at the same time.\n\ndummy_map_server\ndummy_laser\ndummy_joint_states\nrobot_state_publisher\n\nThe first two packages are relatively simple. The dummy_map_server constantly publishes an empty map with a periodic update. The dummy_laser does basically the same; publishing dummy fake laser scans.\nThe dummy_joint_states node is publishing fake joint state data. As we are publishing a simple RRbot with only two joints, this node publishes joint states values for these two joints.\nThe robot_state_publisher is doing the actual interesting work. It parses the given URDF file, extracts the robot model and listens to the incoming joint states. With this information, it publishes TF values for our robot which we visualize in RViz.\nHooray!\n\n\n\n"},{"id":71,"url":"/doc/ros2/Tutorials/Quality-of-Service/","title":"Use quality-of-service settings to handle lossy networks","content":"\nUse quality-of-service settings to handle lossy networks¬∂\n\nTable of Contents\n\nBackground\nBuild/install the demo\n\nFrom pre-compiled binaries\nFrom source\n\n\nRun the demo\n\nCommand line options\nAdd network traffic\n\n\n\n\n\nBackground¬∂\nPlease read the documentationg page about QoS settings for background information on available support in ROS 2.\nIn this demo, we will spawn a node that publishes a camera image and another that subscribes to the image and shows it on the screen.\nWe will then simulate a lossy network connection between them and show how different quality of service settings handle the bad link.\n\n\nBuild/install the demo¬∂\n\nFrom pre-compiled binaries¬∂\nSimply download the binary packages for your OS from the installation page.\n\n\nFrom source¬∂\nOpenCV is a prerequisite for the QoS demo.\nSee the OpenCV documentation for installation instructions.\nFollow the instructions on the installation page for your particular platform.\n\n\n\nRun the demo¬∂\nBefore running the demo, make sure you have a working webcam connected to your computer.\nOnce you‚Äôve installed ROS 2, if you‚Äôre on Linux, source your setup.bash file:\n. <path to ROS 2 install space>/setup.bash\n\n\nor if you‚Äôre on Windows cmd:\ncall <path to ROS 2 install space>/local_setup.bat\n\n\nThen run:\nros2 run image_tools showimage\n\n\nNothing will happen yet.\nshowimage is a subscriber node that is waiting for a publisher on the image topic.\nNote: you have to close the showimage process with Ctrl-C later.\nYou can‚Äôt just close the window.\nIn a separate terminal, source the install file and run the publisher node:\nros2 run image_tools cam2image\n\n\nThis will publish an image from your webcam. In case you don‚Äôt have a camera attached to your computer, there is a commandline option which publishes predefined images.\nros2 run image_tools cam2image -b\n\n\nIn this window, you‚Äôll see terminal output:\nPublishing image #1\nPublishing image #2\nPublishing image #3\n...\n\n\nA window will pop up with the title ‚Äúview‚Äù showing your camera feed.\nIn the first window, you‚Äôll see output from the subscriber:\nReceived image #1\nReceived image #2\nReceived image #3\n...\n\n\nNote for OS X users: If you these examples do not work or you receive an error like ddsi_conn_write failed -1 then you‚Äôll need to increase your system wide UDP packet size:\n$ sudo sysctl -w net.inet.udp.recvspace=209715\n$ sudo sysctl -w net.inet.udp.maxdgram=65500\n\n\nThese changes will not persist a reboot. If you want the changes to persist, add these lines to /etc/sysctl.conf (create the file if it doesn‚Äôt exist already):\nnet.inet.udp.recvspace=209715\nnet.inet.udp.maxdgram=65500\n\n\n\nCommand line options¬∂\nIn one of your terminals, add a -h flag to the original command:\nros2 run image_tools showimage -- -h\n\n\nYou‚Äôll see a list of the possible options you can pass to the demo.\n-h: The help message.\n-r: Reliability.\nThere are two options for this policy: reliable or best effort.\nReliable means that values may be reset and the underlying DDS publisher might block, in order for messages to get delivered in order.\nBest effort means that messages will get sent as is, and they may get dropped or lost without effecting the behavior of the publisher.\n-k: History policy (the ‚Äúk‚Äù stands for ‚Äúkeep‚Äù).\nDetermines how DDS buffers messages in the time between the user code that called publish and the time when the message actually gets sent.\nThere are two options for history: KEEP_ALL and KEEP_LAST.\nKEEP_ALL will buffer all messages before they get sent.\nKEEP_LAST limits the number of buffered messages to a depth specified by the user.\n-d: Queue depth.\nOnly used if the history policy is set to KEEP_LAST.\nThe queue depth determines the maximum number of not yet received messages that get buffered on the sender‚Äôs side before messages start getting dropped.\n-t TOPIC: Topic to use.\nThe topic to use (default: image)\nIf you run cam2image -h, you‚Äôll see the same set of command line options and some additional ones:\n-s: Toggle displaying the input camera stream.\nIf you run cam2image -s by itself, you‚Äôll see a camera window.\nIf you also run showimage, you‚Äôll see two camera windows.\n-x and -y: Set the size of the camera feed (x sets the width, y sets the height).\n-b: Produce images of burgers rather than connecting to a camera\n-f: Publish frequency in Hz. (default: 30)\nThe default quality of service settings are tuned for maximum reliability: the reliability policy is reliable, and the history policy is ‚Äúkeep all‚Äù.\nIt‚Äôs worth noting that both ends must have the same reliability settings for this to work.\nIf the consumer requires the publisher to be reliable, DDS will not match them and there won‚Äôt be any exchange between them.\nWe won‚Äôt see much of a difference if we change the quality of service settings, since the publisher and subscriber are passing messages over inter-process communication, and messages are unlikely to get dropped if they are travelling within the same machine.\n\n\nAdd network traffic¬∂\n\nWarning\nThis section of the demo won‚Äôt work on RTI‚Äôs Connext DDS.\nWhen running multiple nodes in the same host, the RTI Connext implementation uses shared memory along with the loopback interface.\nDegrading the loopback interface throughput won‚Äôt affect shared memory, thus traffic between the two nodes won‚Äôt be affected.\nSee RMW implementation code and RTI Connext Documentation  for further reference.\n\n\nNote\nThis next section is Linux-specific.\n\nHowever, for OS X and Windows you can achieve a similar effect with the utilities ‚ÄúNetwork Link Conditioner‚Äù (part of the xcode tool suite) and ‚ÄúClumsy‚Äù (http://jagt.github.io/clumsy/index.html), respectively, but they will not be covered in this tutorial.\nWe are going to use the Linux network traffic control utility, tc (http://linux.die.net/man/8/tc).\nsudo tc qdisc add dev lo root netem loss 5%\n\n\nThis magical incantation will simulate 5% packet loss over the local loopback device.\nIf you use a higher resolution of the images (e.g. -x 640 -y 480) you might want to try a lower packet loss rate (e.g. 1%).\nNext we start the cam2image and showimage, and we‚Äôll soon notice that both programs seem to have slowed down the rate at which images are transmitted.\nThis is caused by the behavior of the default QoS settings.\nEnforcing reliability on a lossy channel means that the publisher (in this case, cam2image) will resend the network packets until it receives acknowledgement from the consumer (i.e. showimage).\nLet‚Äôs now try running both programs, but with more suitable settings.\nFirst of all, we‚Äôll use the -r 0 option to enable best effort communication.\nThe publisher will now just attempt to deliver the network packets, and don‚Äôt expect acknowledgement from the consumer.\nWe see now that some of the frame on the showimage side were dropped, the frame numbers in the shell running showimage won‚Äôt be consecutive anymore:\n\nWhen you‚Äôre done, remember to delete the queueing discipline:\nsudo tc qdisc delete dev lo root netem loss 5%\n\n\n\n\n\n"},{"id":72,"url":"/doc/ros2/Tutorials/Ament-Tutorial/","title":"Using Ament","content":"\nUsing Ament¬∂\n\nTable of Contents\n\nBackground\nPrerequisites\n\nDevelopment Environment\n\n\nBasics\n\nCreate directory structure\nAdd some sources\nRun the build\nRun the tests\nSource the environment\nTry a demo\n\n\nDevelop your own package\n\nCreate an overlay\nCreate your own package\n\n\nTips\n\n\nThis will provide you with a quick summary of how to get up and running using an ament workspace.\nIt will be a practical tutorial and is not designed to replace the core documentation.\n\nWarning\nAs of ROS 2 Bouncy the recommended build tool is ``colcon`` described in the `colcon tutorial <Colcon-Tutorial>`.\nThe current default branch as well as releases after Bouncy do not include ament_tools anymore.\n\n\nBackground¬∂\nAment is an iteration on the catkin meta-build tool.\nFor more information on the design of ament see this document.\nThe source can be found in the ament GitHub organization.\n\n\nPrerequisites¬∂\n\nDevelopment Environment¬∂\nMake sure that you have setup your development environment according to the building-from-source instruction.\n\n\n\nBasics¬∂\nAn ament workspace is a directory with a particular structure.\nCommonly there is a src subdirectory.\nInside that subdirectory is where the source code will be located.\nTypically the directory starts otherwise empty.\nAment does out of source builds.\nBy default it will create a build and install directory as peers of the src directory.\nThe build directory will be where intermediate files are stored.\nFor each package a subfolder will be created in which e.g. CMake is being invoked.\nThe install directory is where each package will be installed to.\nNB: Compared to catkin there is no devel directory.\n\nCreate directory structure¬∂\nTo make the basic structure in the directory ~/ros2_ws:\nmkdir -p ~/ros2_ws/src\ncd ~/ros2_ws\n\n\nThis is the directory structure of ~/ros2_ws that you can expect at this point:\n.\n‚îî‚îÄ‚îÄ src\n\n1 directory, 0 files\n\n\n\n\nAdd some sources¬∂\nTo start off we need to setup an underlay without any of ROS2 installed.\nNote: if you do not have vcs installed, instructions are here.\nwget https://raw.githubusercontent.com/ros2/ros2/master/ros2.repos\nvcs import src < ros2.repos\n\n\nThis is the directory structure of ~/ros2_ws that you can expect after adding sources (note the exact structure and number of directories/files may change over time):\n.\n‚îú‚îÄ‚îÄ ros2.repos\n‚îî‚îÄ‚îÄ src\n    ‚îú‚îÄ‚îÄ ament\n    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ament_cmake\n    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ament_index\n    |   ...\n    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ osrf_pycommon\n    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ uncrustify\n    ‚îú‚îÄ‚îÄ eProsima\n    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Fast-CDR\n    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Fast-RTPS\n    ‚îú‚îÄ‚îÄ ros\n    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ class_loader\n    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ console_bridge\n    ‚îî‚îÄ‚îÄ ros2\n        ‚îú‚îÄ‚îÄ ament_cmake_ros\n        ‚îú‚îÄ‚îÄ common_interfaces\n        ‚îú‚îÄ‚îÄ demos\n        ...\n        ‚îú‚îÄ‚îÄ urdfdom\n        ‚îú‚îÄ‚îÄ urdfdom_headers\n        ‚îî‚îÄ‚îÄ vision_opencv\n\n51 directories, 1 file\n\n\n\n\nRun the build¬∂\nSince this is a bootstrap environment we need to call ament.py by its full path.\nNote: In the future once ament is either installed on your system or in an underlayed workspace this will no longer be necessary.\nSince there is no devel space in ament and it requires installing each package it supports the option --symlink-install.\nThis allows the installed files to be changed by changing the files in the source space (e.g. Python files or other not compiled resourced) for faster iteration.\nsrc/ament/ament_tools/scripts/ament.py build --build-tests --symlink-install\n\n\n\n\nRun the tests¬∂\nTo run the tests you just built, with the --build-tests option above, run the following:\nsrc/ament/ament_tools/scripts/ament.py test\n\n\nIf you have built (and installed) a workspace before including the tests (using build --build-tests) you can skip the build and install step to speed up the process:\nsrc/ament/ament_tools/scripts/ament.py test --skip-build --skip-install\n\n\n\n\nSource the environment¬∂\nWhen ament has completed building successfully the output will be in the install directory.\nTo use the executables and libraries you need to e.g. add the install/bin directory to your path.\nAment will have generated bash files in the install directory to help setup the environment.\nThese files will both add the required elements to your path and library paths as well as provide any exported bash or shell commands exported by packages.\n. install/local_setup.bash\n\n\nNB: This is slightly different than catkin.\nThe local_setup.* file is slightly different than the setup.* file in that it will only apply settings from the current workspace.\nWhen using more than one workspace you will still source the setup.* files to get the environment including all parent workspaces.\n\n\nTry a demo¬∂\nWith the environment sourced you can now run executables built by ament.\nros2 run demo_nodes_cpp listener &\nros2 run demo_nodes_cpp talker\n\n\nAnd you will see the numbers incrementing.\nLets take down the nodes and try creating our own workspace overlay.\n^-C\nkill %1\n\n\n\n\n\nDevelop your own package¬∂\nAment uses the same package.xml specification as defined for catkin in REP 140.\nYou can create your own package inside the src directory however it is recommended to use an overlay when you are going to iterate only on a few packages.\n\nCreate an overlay¬∂\nNow that you have setup your bootstrap underlay you will also find ament is on your path.\nLets make a new overlay directory ~/ros2_overlay_ws.\nmkdir -p ~/ros2_overlay_ws/src\ncd ~/ros2_overlay_ws/src\n\n\nAnd to get started we‚Äôll overlay the ros2/examples repository:\n# If you know that you're using the latest branch of all\n# repositories in the underlay, you can also get the latest\n# version of the ros2/examples repository, with this command:\n#   git clone https://github.com/ros2/examples.git\n# Otherwise, clone a copy from the underlay source code:\ngit clone ~/ros2_ws/src/ros2/examples\n\n\nAnd build the overlay, but let‚Äôs build with debug so we can make sure to get debug symbols:\ncd ~/ros2_overlay_ws\nament build --cmake-args -DCMAKE_BUILD_TYPE=Debug\n\n\nNow this overlay is on top of the existing overlay so you‚Äôll find that which talker currently refers to the one from the underlay.\nIf you source ~/ros2_overlay_ws/install/local_setup.bash it will change to refer to talker in the overlay.\nIf you are returning with a new terminal to your development and want to pick up developing on your overlay you can simply source ~/ros2_overlay_ws/install/setup.bash which will source all parent workspaces environments automatically.\n\n\nCreate your own package¬∂\nYou can create your own package.\nThe equivalent of catkin_create_package will be ported to ament but is not available yet.\nAment supports multiple build types.\nThe recommended build types are ament_cmake and ament_python.\nAlso supported are pure cmake packages.\nIt‚Äôs expected to add support for more build types.\nAn example of an ament_python build is the ament_tools package, where the setup.py is the primary entry point for building.\nA package such as demo_nodes_cpp uses the ament_cmake build type, and uses CMake as the build tool.\n\n\n\nTips¬∂\n\nIf you do not want to build a specific package place an empty file named AMENT_IGNORE in the directory and it will not be indexed.\n\n‚ÄúCatch all‚Äù options like ‚Äìcmake-args should be placed after other options, or delimited with ‚Äò‚Äì‚Äô:\n\n\n\nament build . --force-cmake-configure --cmake-args -DCMAKE_BUILD_TYPE=Debug -- --ament-cmake-args -DCMAKE_BUILD_TYPE=Release\n\n\n\nIf you want to run a single particular test from a package:\nament test --only-packages YOUR_PKG_NAME --ctest-args -R YOUR_TEST_IN_PKG\n\n\n\n\n\n\n"},{"id":73,"url":"/doc/ros2/Tutorials/Colcon-Tutorial/","title":"Using Colcon to build packages","content":"\nUsing Colcon to build packages¬∂\n\nTable of Contents\n\nBackground\nPrerequisites\n\nInstall ROS 2\nInstall colcon\n\n\nBasics\n\nCreate a workspace\nAdd some sources\nSource an underlay\nBuild the workspace\nRun tests\nSource the environment\nTry a demo\n\n\nCreate your own package\nTips\n\n\nThis a brief tutorial of how to create and build a ROS workspace with colcon.\nIt is a practical tutorial and not designed to replace the core documentation.\nROS 2 releases before Bouncy were using ament_tools described in the ament tutorial.\n\nBackground¬∂\ncolcon is an iteration on the ROS build tools catkin_make, catkin_make_isolated, catkin_tools and ament_tools.\nFor more information on the design of colcon see this document.\nThe source code can be found in the colcon GitHub organization.\n\n\nPrerequisites¬∂\n\nInstall ROS 2¬∂\nMake sure that you have installed ROS 2 following the installation instructions.\n\nAttention\nIf installing from Debian packages, this tutorial requires the ‚ÄúDesktop installation‚Äù.\n\n\n\nInstall colcon¬∂\n\nLinux¬∂\nsudo apt install python3-colcon-common-extensions\n\n\n\n\nOS X¬∂\npython3 -m pip install colcon-common-extensions\n\n\n\n\nWindows¬∂\npip install -U colcon-common-extensions\n\n\n\n\n\n\nBasics¬∂\nA ROS workspace is a directory with a particular structure.\nCommonly there is a src subdirectory.\nInside that subdirectory is where the source code of ROS packages will be located.\nTypically the directory starts otherwise empty.\ncolcon does out of source builds.\nBy default it will create the following directories as peers of the src directory:\n\nThe build directory will be where intermediate files are stored.\nFor each package a subfolder will be created in which e.g. CMake is being invoked.\nThe install directory is where each package will be installed to.\nBy default each package will be installed into a separate subdirectory.\nThe log directory contains various logging information about each colcon invocation.\n\n\nNote\nCompared to catkin there is no devel directory.\n\n\nCreate a workspace¬∂\nFirst, create a directory (ros2_example_ws) to contain our workspace:\n\nLinux/OS X¬∂\nmkdir -p ~/ros2_example_ws/src\ncd ~/ros2_example_ws\n\n\n\n\nWindows¬∂\nmd \\dev\\ros2_example_ws\\src\ncd \\dev\\ros2_example_ws\n\n\nAt this point the workspace contains a single empty directory src:\n.\n‚îî‚îÄ‚îÄ src\n\n1 directory, 0 files\n\n\n\n\n\nAdd some sources¬∂\nLet‚Äôs clone the examples repository into the src directory of the workspace:\ngit clone https://github.com/ros2/examples src/examples\n\n\n\nAttention\nIt is recommended to checkout a branch that is compatible with the version of ROS that was installed (e.g. crystal).\n\ncd ~/ros2_example_ws/src/examples/\ngit checkout $ROS_DISTRO\ncd ~/ros2_example_ws\n\n\nNow the workspace should have the source code to the ROS 2 examples:\n.\n‚îî‚îÄ‚îÄ src\n    ‚îî‚îÄ‚îÄ examples\n        ‚îú‚îÄ‚îÄ CONTRIBUTING.md\n        ‚îú‚îÄ‚îÄ LICENSE\n        ‚îú‚îÄ‚îÄ rclcpp\n        ‚îú‚îÄ‚îÄ rclpy\n        ‚îî‚îÄ‚îÄ README.md\n\n4 directories, 3 files\n\n\n\n\nSource an underlay¬∂\nIt is important that we have sourced the environment for an existing ROS 2 installation that will provide our workspace with the necessary build dependencies for the example packages.\nThis is achieved by sourcing the setup script provided by a binary installation or a source installation, ie. another colcon workspace (see Installation).\nWe call this environment an underlay.\nOur workspace, ros2_examples_ws, will be an overlay on top of the existing ROS 2 installation.\nIn general, it is recommended to use an overlay when you plan to iterate on a small number of packages, rather than putting all of your packages into the same workspace.\n\n\nBuild the workspace¬∂\n\nAttention\nTo build packages on Windows you need to be in a Visual Studio environment, see Building the ROS 2 Code for more details.\n\nIn the root of the workspace, run colcon build.\nSince build types such as ament_cmake do not support the concept of the devel space and require the package to be installed, colcon supports the option --symlink-install.\nThis allows the installed files to be changed by changing the files in the source space (e.g. Python files or other not compiled resourced) for faster iteration.\ncolcon build --symlink-install\n\n\nAfter the build is finished, we should see the build, install, and log directories:\n.\n‚îú‚îÄ‚îÄ build\n‚îú‚îÄ‚îÄ install\n‚îú‚îÄ‚îÄ log\n‚îî‚îÄ‚îÄ src\n\n4 directories, 0 files\n\n\n\n\nRun tests¬∂\nTo run tests for the packages we just built, run the following:\ncolcon test\n\n\n\n\nSource the environment¬∂\nWhen colcon has completed building successfully the output will be in the install directory.\nTo use the executables and libraries you need to e.g. add the install/bin directory to your path.\ncolcon will have generated bash/bat files in the install directory to help setup the environment.\nThese files will both add the required elements to your path and library paths as well as provide any exported bash or shell commands exported by packages.\n\nLinux/OS X¬∂\n. install/setup.bash\n\n\n\n\nWindows¬∂\ncall install\\setup.bat\n\n\n\n\n\nTry a demo¬∂\nWith the environment sourced we can run executables built by colcon.\nLet‚Äôs run a subscriber node from the examples:\nros2 run examples_rclcpp_minimal_subscriber subscriber_member_function\n\n\nIn another terminal, let‚Äôs run a publisher node (don‚Äôt forget to source the setup script):\nros2 run examples_rclcpp_minimal_publisher publisher_member_function\n\n\nYou should see messages from the publisher and subscriber with numbers incrementing.\n\n\n\nCreate your own package¬∂\ncolcon uses the package.xml specification defined in REP 149 (format 2 is also supported).\ncolcon supports multiple build types.\nThe recommended build types are ament_cmake and ament_python.\nAlso supported are pure cmake packages.\nAn example of an ament_python build is the ament_index_python package , where the setup.py is the primary entry point for building.\nA package such as demo_nodes_cpp uses the ament_cmake build type, and uses CMake as the build tool.\nFor convenience, you can use the tool ros2 pkg create to create a new package based on a template.\n\nNote\nFor catkin users, this is the equivalent of catkin_create_package.\n\n\n\nTips¬∂\n\nIf you do not want to build a specific package place an empty file named COLCON_IGNORE in the directory and it will not be indexed.\nIf you want to avoid configuring and building tests in CMake packages you can pass: --cmake-args -DBUILD_TESTING=0.\nIf you want to run a single particular test from a package:\ncolcon test --packages-select YOUR_PKG_NAME --ctest-args -R YOUR_TEST_IN_PKG\n\n\n\n\n\n\n"},{"id":74,"url":"/doc/ros2/Contributing/Inter-Sphinx-Support/","title":"Using Sphinx for cross-referencing packages","content":"\nUsing Sphinx for cross-referencing packages¬∂\n\nTable of Contents\n\nShowing all links of an Intersphinx mapping file\nLinking to other sites using Intersphinx\nExamples of intersphinx in action\n\n\nThis is page provides a quick guide on how you can cross-reference packages documentation within rosindex using Sphinx.\nInventory files must be added to ROSIndex Sphinx‚Äôs conf.py file found here. Note that the URI added to the configuration file must point to the directory where the .inv file is rather than to the file itself (i.e: http://docs.ros.org/independent/api/catkin_pkg instead of http://docs.ros.org/independent/api/catkin_pkg/objects.inv).\n\nShowing all links of an Intersphinx mapping file¬∂\n(Partially borrowed from here).\nTo show all Intersphinx links and their targets of an Intersphinx mapping file, either local or remote, run:\npython -msphinx.ext.intersphinx \"url-or-path-to-inv-file\"\n\n\nThis is helpful when searching for the root cause of a broken Intersphinx link in a documentation project.\n\n\nLinking to other sites using Intersphinx¬∂\n(Partially borrowed from here).\n\nYou may supply an explicit title and reference target: :role:\\`title <target>\\` will refer to target, but the link text will be title.\nIf you prefix the content with !, no reference/hyperlink will be created.\nIf you prefix the content with ~, the link text will only be the last component of the target. For example, :py:meth:\\`~Queue.Queue.get\\` will refer to Queue.Queue.get but only display get as the link text.\n\n\n\nExamples of intersphinx in action¬∂\nLinks to source code can be created as follows:\n\nNote\nClass vcstools.VcsClient implements the vcstools.VcsClient.checkout() method.\n\nClass vcstools.VcsClient implements the vcstools.VcsClient.checkout() method.\n\nLinks to documentation pages:\n\nNote\nRefer to vcstools Developer‚Äôs Guide document.\n\nRefer to vcstools Developer‚Äôs Guide document.\n\nLinks to other pages in this documentation:\n\nNote\nSee the installation page.\n\nSee the installation page.\n\n\n"}]