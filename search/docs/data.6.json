[{"id":30,"url":"/doc/ros2/Contributing/Examples-and-Tools-for-ROS1----ROS2-Migrations/","title":"Examples and tools for ROS1-to-ROS2 Migration","content":"\nExamples and tools for ROS1-to-ROS2 Migration¶\n\nExamples of node/component level migrations¶\n\nRviz has been ported https://github.com/ros2/rviz.git\nAutoware algorithms https://gitlab.com/AutowareAuto/AutowareAuto\n\n\n\nExamples of system level migrations¶\n\nTurtlebot has been ported to ROS2\nhttps://discourse.ros.org/t/tb3-introducing-ros2-tutorials/5959\nToyota’s Jaguar 4x4\nhttps://roscon.ros.org/2018/presentations/ROSCon2018_supercharging_the_jaguar4x4.pdf\n\n\n\nUseful tools¶\n\nAmazon has exposed their tools for porting ROS1 robots to ROS2\nhttps://github.com/awslabs/ros2-migration-tools/tree/master/ros2_migration/porting_tools\n\n\n\n"},{"id":31,"url":"/doc/ros2/Releases/Release-Howto/","title":"How to Release","content":"\nHow to Release¶\nThis page tries to capture the process we go through to make a new beta release of ROS 2.\nWe usually don’t branch before a release but “freeze” the used branch.\nDuring the testing phase make sure that no unwanted changes are being committed to that branch.\nIteratively test either using the artifacts produced by the packaging jobs or from-source builds and make necessary changes.\nOnce the current state is ready to be released, follow these steps:\n\nGet a fresh copy of all repositories using the master ros2.repos file.\n\ncurl https://raw.githubusercontent.com/ros2/ros2/master/ros2.repos | vcs import ./src\n\n\nUpdate the version number in (most) packages (excluding the ones which have their own numbering scheme). Also update the version numbers in all python packages that have a setup.py.\n\nCommit and push these changes: vcs custom ./src --args commit -m \"beta N\" -a, vcs custom ./src --args push\n\n\nCreate a .repos file with the exact commit hashes you have checked out locally:\n\nvcs export --exact ./src > hashes.repos\n\n\nTag (most) repositories using vcstool.\n\nFor some repositories we are not creating ROS 2 specific tags but use the hashes instead:\n\nament/osrf_pycommon\neProsima/Fast-CDR\neProsima/Fast-RTPS\nros/class_loader\nros/console_bridge\nRemove the above repositories for now: rm -fr src/ament/osrf_pycommon src/eProsima src/ros\n\n\nNote that for this step to work without requiring lots of password typing, you either need a ~/.netrc file with your credentials, or you need to change the github URLs in the .repos file to use ssh instead of https.\nCreate the release tag:\n\nvcs custom ./src --args tag release-betaN (adjust the tag name appropriately).\nIf we ever have something other than git repositories we’ll need to use the --git and --hg (for example) arguments separately.\n\n\nUpdate the release-latest tag on all repositories:\n\nvcs custom ./src --args tag -f release-latest\n\n\nPush tags (using force to overwrite existing latest tags):\n\nvcs custom ./src --args push --tags -f\n\n\n\n\nCreate new .repos file:\n\ncp hashes.repos tags.repos\nEdit tags.repos and replace the version attribute for all repositories (except the ones skipped before) with release-betaN (adjust the tag name appropriately).\n\n\nRepeat the tagging and .repos file generation for the turtlebot2_demo.repos file.\n\nAt beta3, only the turtlebot2_demo repo had packages that needed their version bumped, and no repos used a fixed hash instead of the release tag.\n\n\nRun some packaging job using this new .repos file.\n\nFirst upload tags.repos somewhere (e.g. gist.github.com).\nThen trigger a packaging job for each platform and use the url of the hosted .repos file in the CI_ROS2_REPOS_URL field.\nRename each artifact file (an archive file) as ros2-beta<beta-number>-package-<platform><rmw-impl>-<opt-arch>.<ext>.\n\nE.g. ros2-beta2-package-linux-fastrtps-x86_64.tar.bz2\n\n\n\n\nCreate a tag on the ros2/ros2 repository called release-betaN with the new .repos file:\n\nClone ros2/ros2 to the master branch.\nReplace the ros2.repos file’s content with that of the tags.repos file created above.\nCommit it with a message like the tag name, e.g. release-betaN (adjust the tag name appropriately).\nTag it with git tag release-betaN (adjust the tag name appropriately) and git tag -f release-latest push both with git push --tags -f.\n\n\nCreate a new release in the Releases section of ros2/ros2 using this new tag:\n\nUse the title ROS 2 Beta N release (matching the style of previous releases).\n\n\nUpload the renamed artifacts to the Release on GitHub using the web interface:\n\nE.g. https://github.com/ros2/ros2/releases/edit/release-beta2\n\n\nCreate an overview page for the beta release, e.g. https://github.com/ros2/ros2_documentation/Beta2-Overview\nUpdate the releases page to point to it: https://github.com/ros2/ros2_documentation/Releases\nUpdate the Features page if appropriate.\nUpdate the link on the home page: https://github.com/ros2/ros2_documentation/README\nRun the documentation generation and upload and link the results from http://docs.ros2.org/\nDraft and send an announcement to discourse about that release.\n\n\n"},{"id":32,"url":"/doc/ros2/Contributing/Set-up-a-new-Linux-CI-node/","title":"How to setup Linux Jenkins nodes","content":"\nHow to setup Linux Jenkins nodes¶\n\nTable of Contents\n\nCreating an AWS instance\nSetting up the machine\nAdding it to the master\n\n\nThis page describes how to set up a linux machine for ROS2 CI jobs using AWS.\n\nCreating an AWS instance¶\nIn short, use the company AWS account to launch an instance running based off the official Ubuntu 16.04 AMI.\n\nAMI: Ubuntu 16.04\nRegion: N. California us-west-1a\nType: c4.large\nStorage: EBS 1TB\nSecurity Group: ROS 2 Jenkins Build Machines\nKey pair: Create a new pair with a descriptive name like ci_ros2_linux_4\n\nMake sure to save it with the other credentials so others can access this machine\n\n\n\nGive the instance a descriptive name like ROS2 CI (linux 4).\nRecord the ip address here (private).\n\n\nSetting up the machine¶\nIn short, make sure the jenkins master can ssh into the new node and run docker.\n\nUse the key pair to log into the new node\n\nssh -i ci_ros2_linux_4.pem ubuntu@IPADDRESS\n\n\nRun the following commands\nsudo apt update\nsudo apt install -y git\nsudo apt install -y openjdk-8-jre-headless\nsudo bash -c 'echo \"deb http://repositories.ros.org/ubuntu/testing/ `lsb_release -cs` main\" > /etc/apt/sources.list.d/ros-latest.list'\nsudo bash -c 'curl --silent http://repositories.ros.org/repos.key |sudo apt-key add -'\nsudo apt update\nsudo apt install -y python-vcstool\ncurl -fsSL https://get.docker.com/ | sh\nsudo adduser --disabled-password jenkins\nsudo usermod -aG docker jenkins\nsudo service docker start\n\n\n\nMake sure the jenkins user can run docker\nsudo su jenkins\ndocker run hello-world\n\n\n\nAs the jenkins user, add the master’s public key to authorized_keys\n\nSSH into the jenkins master and get the contents of the public key (probably at /var/lib/jenkins/.ssh/id_rsa.pub, or wherever the home directory of the jenkins user is)\nSSH into the new slave and add that key to the authorized keylist\n.. code-block:: bash\n\n# on new slave\ncd /home/jenkins/\nmkdir .ssh\nchmod 700 .ssh\ntouch .ssh/authorized_keys\nchmod 600 .ssh/authorized_keys\n# Paste id_rsa.pub from the jenkins master into this file\nvim .ssh/authorized_keys\n\n\n\n\n\n\n\nAdding it to the master¶\n\nAdd a new agent to http://ci.ros2.org/computer/\n\nNumber of executors: 1\nRemote root directory: /home/jenkins\nLabels: linux\nLaunch method: Launch slave agents via ssh\n\nHost: Ip address of new node\nCredentials: Jenkins\nHost Key Verification Strategy: Manually provided key verification strategy\n\nSSH Key paste the contents of /etc/ssh/ssh_host_rsa_key.pub from the new node here.\n\n\nNode Properties:\n\nCheck Notify when Node online status changes and set the email to the ros2 buildfarm google group.\n\n\n\n\n\n\nLaunch the agent on the new node\n\n\n\n"},{"id":33,"url":"/doc/ros2/Contributing/Set-up-a-new-Windows-CI-node/","title":"How to setup a Windows Jenkins node","content":"\nHow to setup a Windows Jenkins node¶\n\nTable of Contents\n\nInstall and Update Windows 10\nInstall Dependencies for ROS 2\nSetup git\nSetup Jenkins Agent\nInstall RTI Connext\n\n\n\nNote\nSee this older (private) document for previous instructions:\nhttps://docs.google.com/document/d/1SmmWa7MVnwjmMw9XJF33-fsa0dtkYj2AeEXBa8BCsYs/edit\n\n\nInstall and Update Windows 10¶\nWe use the normal Windows 10 version, not the enterprise, but other than that we just do system updates and use default settings otherwise.\n\n\nInstall Dependencies for ROS 2¶\nFollow our Windows “from source” installation instructions.\n\n\nSetup git¶\nEnsure that the git installation has a (garbage) email and name, otherwise it will fail if it ever needs to make merge commits when merging branches with “master”.\nNote that this must be done in the context of the “System” user, which is what the Jenkins service will run as.\n\nBecome the system user by using psexec:\n\nDownload it from: https://technet.microsoft.com/en-us/sysinternals/bb897553.aspx\nThen extract the zip, open a command-prompt as administrator, and run: psexec -i -s cmd.exe\n\n\n\nThis is all pieced together from a couple of pages here:\n\nhttp://blog.thomasvandoren.com/jenkins-windows-slave-with-git.html\nhttps://answers.atlassian.com/questions/128324/where-is-the-home-directory-for-the-system-user\n\nOnce you are the system user, set the git config:\n> git config --global user.email \"noreply@osrfoundation.org\"\n> git config --global user.name \"nobody\"\n\n\n\n\nSetup Jenkins Agent¶\nDownload and install Java from Oracle:\nhttps://java.com/en/download/\nCreate the C:\\J folder.\nGo to http://ci.ros2.org and select: Manage Jenkins -> Manage Nodes -> New node\nCopy an existing node and choose a working windows node (at the time of the writing Windshield or Portable), fill in all the description fields, set the label to “windows slave” and save.\nHit the “launch” button to download the “Java Web Start App” and save it on the desktop.\nOpen an Administrator cmd.exe and then:\n> cd \\path\\to\\downloaded\\file\n> .\\slave-agent.jnlp\n\n\nOnce open, go to File->”Install as a Service”.\nThen you can close the slave agent as it will start on boot.\n\n\nInstall RTI Connext¶\nDownload and install Connext binary:\nhttp://www.rti.com/downloads/connext-files.html\nMake sure to also install the security plugins.\nDownload the license file from our private github repository:\nhttps://github.com/osrf/rticonnextdds-src/tree/30adec34dbaf1445914ff9e003640b0c50ab9969\nRun the RTI launcher application and point it at the license file.\nFinally, just need to reboot to be sure the node comes online as expected.\n\n\n"},{"id":34,"url":"/doc/ros2/Contributing/Set-up-a-new-macOS-CI-node/","title":"How to setup a macOS Jenkins node","content":"\nHow to setup a macOS Jenkins node¶\n\nTable of Contents\n\nInstall macOS High Sierra\nSetup SSH/VNC for Remote Access\nHost Setup\nInstall ROS 2 Dependencies\nSetting up the Jenkins Workspace and Agent\n\n\n\nNote\nLast installed/updated on 2017-11-20 (Mac OS 10.13.1 High Sierra) and see this older (private) document for previous instructions.\n\n\nInstall macOS High Sierra¶\nInstall: APFS case-sensitive\nPost-install: No Siri, no location services, no cloud anything, no analytics, no filevault disk encryption.\n\n\nSetup SSH/VNC for Remote Access¶\nMake sure you don’t use too long of a password.\nThat makes VNC auth fail in bizarre ways.\nIn particular, VNC auth limits you to 8 characters.\n\nGo to: Apple->System Preferences->Sharing\n\nset hostname to something reasonable\ncheck “Remote Login”\ncheck “Screen Sharing”\n\n\nadd Terminal to the dock\nGo to: Apple->System Preferences->Energy Saver\n\nset sleep to never\nuncheck everything\n\n\nGo to: Apple->Security\n\nclick lock to unlock it\n“Allow Apps from app store and verified developers”\nuncheck “Require password after 5 minutes” box\nuncheck “Disable automatic login”\n\n\n\n\n\nHost Setup¶\nInstall XCode tools:\n$ xcode select --install\n\n\nInstall JDK for Jenkins.\nEasiest way is to type java at the terminal and let Apple link you to Oracle’s JDK download.\nI installed the latest JDK 8 (withholding Java 9 for now).\nInstall Homebrew following instructions at https://brew.sh\nInstall ssh-askpass via homebrew\n$ brew tap theseal/ssh-askpass\n$ brew install ssh-askpass\n\n\nCreate ~/.bash_profile with this one line:\n. ~/.bashrc\n\n\nCreate ~/.bashrc with one line:\nexport ROS_DOMAIN_ID=XXX  # where XXX is chosen from this document\n\n\nSet up dummy git names:\n$ git config --global user.email \"nobody@osrfoundation.org\"\n$ git config --global user.name \"HOSTNAME\"\n\n\n\n\nInstall ROS 2 Dependencies¶\nInstall them according to our install instructions.\nIncluding:\n\nbrew packages\npip packages\nthe optional RTI Connext and OpenSplice packages\neverything but downloading the source and building ROS 2 (unless you want to do so for testing the setup)\n\n\nRQt dependencies¶\n\nbrew install sip pyqt5\nFix some path names when looking for sip stuff during install (see ROS 1 wiki):\nln -s /usr/local/share/sip/Qt5 /usr/local/share/sip/PyQt5\n\nbrew install graphviz\npython3 -m pip install pygraphviz pydot\nbrew link --force qt\nThis is the quickest solution but may cause issues when upgrading Qt or if other packages are expecting Qt 4.\nAnother option is to update your PATH and CMAKE_PREFIX_PATH to include the Qt install location:\n$ export PATH=\"$(brew --prefix qt)/bin:$PATH\"\n$ export CMAKE_PREFIX_PATH=\"$(brew --prefix qt):$CMAKE_PREFIX_PATH\"\n\n\n\n\n\n\nRTI Connext Specific Instructions¶\n\nThe Open Robotics license is here (private repo): https://github.com/osrf/rticonnextdds-src/blob/license/rti_license.dat\nOpen the RTI launcher application\n\nIn the RTI launcher, open the file dialog to choose the license file.\nInstall it for all users.\nClick the Installation tab\nClick RTI Package installer\n\n\nNavigate to the connext extracted directory (usually something like /Applications/rti_...\n\nSelect the rti_security rtipkg (don’t bother with the openssl ones, we use system openssl)\n\n\nSet the shared memory parameters from https://community.rti.com/kb/osx510\n\nDo not bother to reboot yet.\n\n\n\n\n\n\nSetting up the Jenkins Workspace and Agent¶\n$ mkdir jenkins jenkins-agent\n$ cd jenkins-agent\n$ wget http://ci.ros2.org/jnlpJars/slave.jar\n\n\nCopy the jenkins agent plist from https://gist.github.com/nuclearsandwich/c9546e76ba63767bc1025c393e85235b\nEdit the file to match the jnlp url and secret of the host you’re setting up.\nYou may need to create a new agent if you’re not re-imaging an existing one.\n$ mkdir ~/Library/LaunchAgents\n$ cp ~/jenkins-agent/org.ros2.ci.jenkins-agent.plist ~/Library/LaunchAgents\n$ launchctl load -w ~/Library/LaunchAgents/org.ros2.ci.jenkins-agent.plist\n\n\nReboot! You should be good to go, run some test CI jobs.\n\n\n"}]