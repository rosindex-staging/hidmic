[{"id":80,"url":"/doc/ros2/Installation/Dashing/Linux-Development-Setup/","title":"Building ROS 2 on Linux","content":"\nBuilding ROS 2 on Linux¶\n\nTable of Contents\n\nSystem Requirements\nSystem setup\n\nSet Locale\nAdd the ROS 2 apt repository\nInstall development tools and ROS tools\n\n\nGet ROS 2 code\nInstall dependencies using rosdep\nInstall more DDS implementations (Optional)\n\nPrismTech OpenSplice Debian Packages built by OSRF\nRTI Connext (version 5.3.1, amd64 only)\n\n\nBuild the code in the workspace\nTry some examples\nAlternate compilers\n\nClang\n\n\nTroubleshooting\n\nInternal compiler error\nOut of memory\nMultiple Host Interference\n\n\n\n\n\nSystem Requirements¶\nTarget platforms for Dashing Diademata are (see REP 2000):\n\nTier 1: Ubuntu Linux - Bionic Beaver (18.04) 64-bit\n\nTier 3 platforms (not actively tested or supported) include:\n\nDebian Linux - Stretch (9)\nFedora 30, see alternate instructions\nArch Linux, see alternate instructions\n\n\n\nSystem setup¶\n\nSet Locale¶\nMake sure to set a locale that supports UTF-8.\nIf you are in a minimal environment such as a Docker container, the locale may be set to something minimal like POSIX.\nThe following is an example for setting locale.\nHowever, it should be fine if you’re using a different UTF-8 supported locale.\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n\n\n\n\nAdd the ROS 2 apt repository¶\nFirst make sure you have the ROS 2 apt repositories added to your system, if not refer to the following section.\n\n\nInstall development tools and ROS tools¶\nsudo apt update && sudo apt install -y \\\n  build-essential \\\n  cmake \\\n  git \\\n  python3-colcon-common-extensions \\\n  python3-lark-parser \\\n  python3-lxml \\\n  python3-numpy \\\n  python3-pip \\\n  python-rosdep \\\n  python3-vcstool \\\n  wget\n# install some pip packages needed for testing\npython3 -m pip install -U \\\n  argcomplete \\\n  flake8 \\\n  flake8-blind-except \\\n  flake8-builtins \\\n  flake8-class-newline \\\n  flake8-comprehensions \\\n  flake8-deprecated \\\n  flake8-docstrings \\\n  flake8-import-order \\\n  flake8-quotes \\\n  pytest-repeat \\\n  pytest-rerunfailures \\\n  pytest \\\n  pytest-cov \\\n  pytest-runner \\\n  setuptools\n# install Fast-RTPS dependencies\nsudo apt install --no-install-recommends -y \\\n  libasio-dev \\\n  libtinyxml2-dev\n\n\n\n\n\nGet ROS 2 code¶\nCreate a workspace and clone all repos:\nmkdir -p ~/ros2_ws/src\ncd ~/ros2_ws\nwget https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos\nvcs import src < ros2.repos\n\n\n\nNote: if you want to get all of the latest bug fixes then you can try the “tip” of development by replacing release-latest in the URL above with master. The release-latest is preferred by default because it goes through more rigorous testing on release than changes to master do. See also Maintaining a Source Checkout.\n\n\n\nInstall dependencies using rosdep¶\nsudo rosdep init\nrosdep update\nrosdep install --from-paths src --ignore-src --rosdistro dashing -y --skip-keys \"console_bridge fastcdr fastrtps libopensplice67 libopensplice69 rti-connext-dds-5.3.1 urdfdom_headers\"\n\n\n\n\nInstall more DDS implementations (Optional)¶\nROS 2 builds on top of DDS.\nIt is compatible with multiple DDS or RTPS (the DDS wire protocol) vendors.\nThe repositories you downloaded for ROS 2 includes eProsima’s Fast RTPS, which is the only bundled vendor.\nIf you would like to use one of the other vendors you will need to install their software separately before building.\nThe ROS 2 build will automatically build support for vendors that have been installed and sourced correctly.\nBy default we include eProsima’s FastRTPS in the workspace and it is the default middleware. Detailed instructions for installing other DDS vendors are provided below.\n\nPrismTech OpenSplice Debian Packages built by OSRF¶\nsudo apt install libopensplice69  # from packages.ros.org/ros2/ubuntu\n\n\n\n\nRTI Connext (version 5.3.1, amd64 only)¶\n\nDebian packages provided in the ROS 2 apt repositories¶\nYou can install a Debian package of RTI Connext available on the ROS 2 apt repositories.\nYou will need to accept a license from RTI.\nsudo apt install -q -y \\\n    rti-connext-dds-5.3.1  # from packages.ros.org/ros2/ubuntu\n\n\nSource the setup file to set the NDDSHOME environment variable.\ncd /opt/rti.com/rti_connext_dds-5.3.1/resource/scripts && source ./rtisetenv_x64Linux3gcc5.4.0.bash; cd -\n\n\nNote: when using zsh you need to be in the directory of the script when sourcing it to have it work properly\nNow you can build as normal and support for RTI will be built as well.\nIf you want to install the Connext DDS-Security plugins please refer to this page\n\n\nOfficial binary packages from RTI¶\nYou can install the Connext 5.3.1 package for Linux provided by RTI from their downloads page.\nTo use RTI Connext you will need to have obtained a license from RTI.\nAdd the following line to your .bashrc file pointing to your copy of the license.\nexport RTI_LICENSE_FILE=path/to/rti_license.dat\n\n\nAfter downloading, use chmod +x on the .run executable and then execute it.\nNote that if you’re installing to a system directory use sudo as well.\nThe default location is ~/rti_connext_dds-5.3.1\nSource the setup file to set the NDDSHOME environment variable.\nsource ~/rti_connext_dds-5.3.1/resource/scripts/rtisetenv_x64Linux3gcc5.4.0.bash\n\n\nNow you can build as normal and support for RTI will be built as well.\n\n\n\n\nBuild the code in the workspace¶\nNote: to build the ROS 1 bridge, read the ros1_bridge instructions.\nMore info on working with a ROS workspace can be found in this tutorial.\ncd ~/ros2_ws/\ncolcon build --symlink-install\n\n\nNote: if you are having trouble compiling all examples and this is preventing you from completing a successful build, you can use AMENT_IGNORE in the same manner as CATKIN_IGNORE to ignore the subtree or remove the folder from the workspace.\nTake for instance: you would like to avoid installing the large OpenCV library.\nWell then simply $ touch AMENT_IGNORE in the cam2image demo directory to leave it out of the build process.\nOptionally install all packages into a combined directory (rather than each package in a separate subdirectory).\nOn Windows due to limitations of the length of environment variables you should use this option when building workspaces with many (~ >> 100 packages).\nAlso, if you have already installed ROS2 from Debian make sure that you run the build command in a fresh environment. You may want to make sure that you do not have source /opt/ros/${ROS_DISTRO}/setup.bash in your .bashrc.\ncolcon build --symlink-install --merge-install\n\n\nAfterwards source the local_setup.* from the install folder.\n\n\nTry some examples¶\nIn one terminal, source the setup file and then run a talker:\n. ~/ros2_ws/install/local_setup.bash\nros2 run demo_nodes_cpp talker\n\n\nIn another terminal source the setup file and then run a listener:\n. ~/ros2_ws/install/local_setup.bash\nros2 run demo_nodes_py listener\n\n\nYou should see the talker saying that it’s Publishing messages and the listener saying I heard those messages.\nHooray!\nSee the demos for other things to try.\n\n\nAlternate compilers¶\nUsing a different compiler besides gcc to compile ROS 2 is easy. If you set the environment variables CC and CXX to executables for a working C and C++ compiler, respectively, and retrigger CMake configuration (by using --force-cmake-config or by deleting the packages you want to be affected), CMake will reconfigure and use the different compiler.\n\nClang¶\nTo configure CMake to detect and use Clang:\nsudo apt install clang\nexport CC=clang\nexport CXX=clang++\ncolcon build --cmake-force-configure\n\n\nTODO: using ThreadSanitizer, MemorySanitizer\n\n\n\nTroubleshooting¶\n\nInternal compiler error¶\nIf you experience an ICE when trying to compile on a memory constrained platform like a Raspberry PI you might want to build single threaded (prefix the build invocation with MAKEFLAGS=-j1).\n\n\nOut of memory¶\nThe ros1_bridge in its current form requires 4Gb of free RAM to compile.\nIf you don’t have that amount of RAM available it’s suggested to use AMENT_IGNORE in that folder and skip its compilation.\n\n\nMultiple Host Interference¶\nIf you’re running multiple instances on the same network you may get interference.\nTo avoid this you can set the environment variable ROS_DOMAIN_ID to a different integer, the default is zero.\nThis will define the DDS domain id for your system.\nNote that if you are using the OpenSplice DDS implementation you will also need to update the OpenSplice configuration file accordingly. The location of the configuration file is referenced in the OSPL_URI environment variable.\n\n\n\n"},{"id":81,"url":"/doc/ros2/Installation/Crystal/Linux-Development-Setup/","title":"Building ROS 2 on Linux","content":"\nBuilding ROS 2 on Linux¶\n\nTable of Contents\n\nSystem Requirements\nSystem setup\n\nSet Locale\nAdd the ROS 2 apt repository\nInstall development tools and ROS tools\n\n\nGet ROS 2 code\nInstall dependencies using rosdep\nInstall more DDS implementations (Optional)\n\nPrismTech OpenSplice Debian Packages built by OSRF\nRTI Connext (version 5.3.1, amd64 only)\n\n\nBuild the code in the workspace\nTry some examples\nAlternate compilers\n\nClang\n\n\nTroubleshooting\n\nInternal compiler error\nOut of memory\nMultiple Host Interference\n\n\n\n\n\nSystem Requirements¶\nTarget platforms for Crystal Clemmys are (see REP 2000):\n\nTier 1: Ubuntu Linux - Bionic Beaver (18.04) 64-bit\nTier 2: Ubuntu Linux - Xenial Xerus (16.04) 64-bit\n\nTier 3 platforms (not actively tested or supported) include:\n\nDebian Linux - Stretch (9)\nFedora 26, see alternate instructions\nArch Linux, see alternate instructions\n\n\n\nSystem setup¶\n\nSet Locale¶\nMake sure to set a locale that supports UTF-8.\nIf you are in a minimal environment such as a Docker container, the locale may be set to something minimal like POSIX.\nThe following is an example for setting locale.\nHowever, it should be fine if you’re using a different UTF-8 supported locale.\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n\n\n\n\nAdd the ROS 2 apt repository¶\nFirst make sure you have the ROS 2 apt repositories added to your system, if not refer to the following section.\n\n\nInstall development tools and ROS tools¶\nsudo apt update && sudo apt install -y \\\n  build-essential \\\n  cmake \\\n  git \\\n  python3-colcon-common-extensions \\\n  python3-lark-parser \\\n  python3-pip \\\n  python-rosdep \\\n  python3-vcstool \\\n  wget\n# install some pip packages needed for testing\npython3 -m pip install -U \\\n  argcomplete \\\n  flake8 \\\n  flake8-blind-except \\\n  flake8-builtins \\\n  flake8-class-newline \\\n  flake8-comprehensions \\\n  flake8-deprecated \\\n  flake8-docstrings \\\n  flake8-import-order \\\n  flake8-quotes \\\n  pytest-repeat \\\n  pytest-rerunfailures \\\n  pytest \\\n  pytest-cov \\\n  pytest-runner \\\n  setuptools\n# install Fast-RTPS dependencies\nsudo apt install --no-install-recommends -y \\\n  libasio-dev \\\n  libtinyxml2-dev\n\n\n\n\n\nGet ROS 2 code¶\nCreate a workspace and clone all repos:\nmkdir -p ~/ros2_ws/src\ncd ~/ros2_ws\nwget https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos\nvcs import src < ros2.repos\n\n\n\nNote: if you want to get all of the latest bug fixes then you can try the “tip” of development by replacing release-latest in the URL above with master. The release-latest is preferred by default because it goes through more rigorous testing on release than changes to master do. See also Maintaining a Source Checkout.\n\n\n\nInstall dependencies using rosdep¶\nsudo rosdep init\nrosdep update\n# [Ubuntu 18.04]\nrosdep install --from-paths src --ignore-src --rosdistro crystal -y --skip-keys \"console_bridge fastcdr fastrtps libopensplice67 libopensplice69 rti-connext-dds-5.3.1 urdfdom_headers\"\n# [Ubuntu 16.04]\nrosdep install --from-paths src --ignore-src --rosdistro crystal -y --skip-keys \"console_bridge fastcdr fastrtps libopensplice67 libopensplice69 python3-lark-parser rti-connext-dds-5.3.1 urdfdom_headers\"\npython3 -m pip install -U lark-parser\n\n\n\n\nInstall more DDS implementations (Optional)¶\nROS 2 builds on top of DDS.\nIt is compatible with multiple DDS or RTPS (the DDS wire protocol) vendors.\nThe repositories you downloaded for ROS 2 includes eProsima’s Fast RTPS, which is the only bundled vendor.\nIf you would like to use one of the other vendors you will need to install their software separately before building.\nThe ROS 2 build will automatically build support for vendors that have been installed and sourced correctly.\nBy default we include eProsima’s FastRTPS in the workspace and it is the default middleware. Detailed instructions for installing other DDS vendors are provided below.\n\nPrismTech OpenSplice Debian Packages built by OSRF¶\n# For Crystal Clemmys\nsudo apt install libopensplice69  # from packages.ros.org/ros2/ubuntu\n\n# For Bouncy Bolson\nsudo apt install libopensplice67  # from packages.ros.org/ros2/ubuntu\n\n\n\n\nRTI Connext (version 5.3.1, amd64 only)¶\n\nDebian packages provided in the ROS 2 apt repositories¶\nYou can install a Debian package of RTI Connext available on the ROS 2 apt repositories.\nYou will need to accept a license from RTI.\nsudo apt install -q -y \\\n    rti-connext-dds-5.3.1  # from packages.ros.org/ros2/ubuntu\n\n\nSource the setup file to set the NDDSHOME environment variable.\ncd /opt/rti.com/rti_connext_dds-5.3.1/resource/scripts && source ./rtisetenv_x64Linux3gcc5.4.0.bash; cd -\n\n\nNote: when using zsh you need to be in the directory of the script when sourcing it to have it work properly\nNow you can build as normal and support for RTI will be built as well.\nIf you want to install the Connext DDS-Security plugins please refer to this page\n\n\nOfficial binary packages from RTI¶\nYou can install the Connext 5.3.1 package for Linux provided by RTI from their downloads page.\nTo use RTI Connext you will need to have obtained a license from RTI.\nAdd the following line to your .bashrc file pointing to your copy of the license.\nexport RTI_LICENSE_FILE=path/to/rti_license.dat\n\n\nAfter downloading, use chmod +x on the .run executable and then execute it.\nNote that if you’re installing to a system directory use sudo as well.\nThe default location is ~/rti_connext_dds-5.3.1\nSource the setup file to set the NDDSHOME environment variable.\nsource ~/rti_connext_dds-5.3.1/resource/scripts/rtisetenv_x64Linux3gcc5.4.0.bash\n\n\nNow you can build as normal and support for RTI will be built as well.\n\n\n\n\nBuild the code in the workspace¶\nNote: to build the ROS 1 bridge, read the ros1_bridge instructions.\nMore info on working with a ROS workspace can be found in this tutorial.\ncd ~/ros2_ws/\n# On Ubuntu Linux Bionic Beaver 18.04\ncolcon build --symlink-install\n# On Ubuntu Linux Xenial Xerus 16.04\ncolcon build --symlink-install --packages-ignore qt_gui_cpp rqt_gui_cpp\n\n\nNote: if you are having trouble compiling all examples and this is preventing you from completing a successful build, you can use AMENT_IGNORE in the same manner as CATKIN_IGNORE to ignore the subtree or remove the folder from the workspace.\nTake for instance: you would like to avoid installing the large OpenCV library.\nWell then simply $ touch AMENT_IGNORE in the cam2image demo directory to leave it out of the build process.\nOptionally install all packages into a combined directory (rather than each package in a separate subdirectory).\nOn Windows due to limitations of the length of environment variables you should use this option when building workspaces with many (~ >> 100 packages).\nAlso, if you have already installed ROS2 from Debian make sure that you run the build command in a fresh environment. You may want to make sure that you do not have source /opt/ros/${ROS_DISTRO}/setup.bash in your .bashrc.\ncolcon build --symlink-install --merge-install\n\n\nAfterwards source the local_setup.* from the install folder.\n\n\nTry some examples¶\nIn one terminal, source the setup file and then run a talker:\n. ~/ros2_ws/install/local_setup.bash\nros2 run demo_nodes_cpp talker\n\n\nIn another terminal source the setup file and then run a listener:\n. ~/ros2_ws/install/local_setup.bash\nros2 run demo_nodes_py listener\n\n\nYou should see the talker saying that it’s Publishing messages and the listener saying I heard those messages.\nHooray!\nSee the demos for other things to try.\n\n\nAlternate compilers¶\nUsing a different compiler besides gcc to compile ROS 2 is easy. If you set the environment variables CC and CXX to executables for a working C and C++ compiler, respectively, and retrigger CMake configuration (by using --force-cmake-config or by deleting the packages you want to be affected), CMake will reconfigure and use the different compiler.\n\nClang¶\nTo configure CMake to detect and use Clang:\nsudo apt install clang\nexport CC=clang\nexport CXX=clang++\ncolcon build --cmake-force-configure\n\n\nTODO: using ThreadSanitizer, MemorySanitizer\n\n\n\nTroubleshooting¶\n\nInternal compiler error¶\nIf you experience an ICE when trying to compile on a memory constrained platform like a Raspberry PI you might want to build single threaded (prefix the build invocation with MAKEFLAGS=-j1).\n\n\nOut of memory¶\nThe ros1_bridge in its current form requires 4Gb of free RAM to compile.\nIf you don’t have that amount of RAM available it’s suggested to use AMENT_IGNORE in that folder and skip its compilation.\n\n\nMultiple Host Interference¶\nIf you’re running multiple instances on the same network you may get interference.\nTo avoid this you can set the environment variable ROS_DOMAIN_ID to a different integer, the default is zero.\nThis will define the DDS domain id for your system.\nNote that if you are using the OpenSplice DDS implementation you will also need to update the OpenSplice configuration file accordingly. The location of the configuration file is referenced in the OSPL_URI environment variable.\n\n\n\n"},{"id":82,"url":"/doc/ros2/Installation/Dashing/OSX-Development-Setup/","title":"Building ROS 2 on OS X","content":"\nBuilding ROS 2 on OS X¶\n\nTable of Contents\n\nSystem requirements\nInstall prerequisites\nDisable System Integrity Protection (SIP)\nGet the ROS 2 code\nInstall additional DDS vendors (optional)\nBuild the ROS 2 code\nTry some examples\nAlternative DDS sources\n\nAdlink OpenSplice\nRTI Connext (5.3)\n\n\nTroubleshooting\n\nSegmentation Fault when using pyenv\nLibrary not loaded; image not found\nQt build errors e.g. unknown type name 'Q_ENUM'\nMissing symbol when opencv (and therefore libjpeg, libtiff, and libpng) are installed with Homebrew\n\n\n\n\n\nSystem requirements¶\nWe support OS X 10.12.x.\nHowever, some new versions like 10.13.x and some older versions like 10.11.x and 10.10.x are known to work as well.\n\n\nInstall prerequisites¶\nYou need the following things installed to build ROS 2:\n\nXcode\n\nIf you don’t already have it installed, install Xcode and the Command Line Tools:\nxcode-select --install\n\n\n\n\n\nbrew (needed to install more stuff; you probably already have this):\n\nFollow installation instructions at http://brew.sh/\nOptional: Check that brew is happy with your system configuration by running:\nbrew doctor\n\n\nFix any problems that it identifies.\n\n\n\nUse brew to install more stuff:\nbrew install cmake cppcheck eigen pcre poco python3 tinyxml wget\n\n# install dependencies for Fast-RTPS if you are using it\nbrew install asio tinyxml2\n\nbrew install opencv\n\n# install dependencies for rcl_logging_log4cxx\nbrew install log4cxx\n\n\n\nInstall rviz dependencies\n# install dependencies for Rviz\nbrew install qt freetype assimp\n\n# Add the Qt directory to the PATH and CMAKE_PREFIX_PATH\nexport CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:/usr/local/opt/qt\nexport PATH=$PATH:/usr/local/opt/qt/bin\n\n\n\nUse python3 -m pip (just pip may install Python3 or Python2) to install more stuff:\npython3 -m pip install argcomplete catkin_pkg colcon-common-extensions coverage empy flake8 flake8-blind-except flake8-builtins flake8-class-newline flake8-comprehensions flake8-deprecated flake8-docstrings flake8-import-order flake8-quotes lark-parser mock nose pep8 pydocstyle pyparsing setuptools vcstool\n\n\n\nOptional: if you want to build the ROS 1<->2 bridge, then you must also install ROS 1:\n\nStart with the normal install instructions: http://wiki.ros.org/kinetic/Installation/OSX/Homebrew/Source\nWhen you get to the step where you call rosinstall_generator to get the source code, here’s an alternate invocation that brings in just the minimum required to produce a useful bridge:\nrosinstall_generator catkin common_msgs roscpp rosmsg --rosdistro kinetic --deps --wet-only --tar > kinetic-ros2-bridge-deps.rosinstall\nwstool init -j8 src kinetic-ros2-bridge-deps.rosinstall\n\n\nOtherwise, just follow the normal instructions, then source the resulting install_isolated/setup.bash before proceeding here to build ROS 2.\n\n\n\n\n\n\nDisable System Integrity Protection (SIP)¶\nOS X versions >=10.11 have System Integrity Protection enabled by default.\nSo that SIP doesn’t prevent processes from inheriting dynamic linker environment variables, such as DYLD_LIBRARY_PATH, you’ll need to disable it following these instructions.\n\n\nGet the ROS 2 code¶\nCreate a workspace and clone all repos:\nmkdir -p ~/ros2_ws/src\ncd ~/ros2_ws\nwget https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos\nvcs import src < ros2.repos\n\n\n\nNote\nIf you want to get all of the latest bug fixes then you can try the “tip” of development by replacing release-latest in the url above with master. The release-latest is preferred by default because it goes through more rigorous testing on release than changes to master do. See also Maintaining a Source Checkout.\n\n\n\nInstall additional DDS vendors (optional)¶\nROS 2 builds on top of DDS.\nIt is compatible with multiple DDS or RTPS (the DDS wire protocol) vendors.\nThe repositories you downloaded for ROS 2 includes eProsima’s Fast RTPS, which is the only bundled vendor.\nIf you would like to use one of the other vendors you will need to install their software separately before building.\nThe ROS 2 build will automatically build support for vendors that have been installed and sourced correctly.\nBy default we include eProsima’s FastRTPS in the workspace and it is the default middleware.\nDetailed instructions for installing other DDS vendors are provided in the “Alternative DDS sources” section below.\n\n\nBuild the ROS 2 code¶\nNote: if you are trying to build the ROS 1 <-> ROS 2 bridge, follow instead these modified instructions.\nRun the colcon tool to build everything (more on using colcon in this tutorial):\ncd ~/ros2_ws/\ncolcon build --symlink-install\n\n\n\n\nTry some examples¶\nIn a clean new terminal, source the setup file (this will automatically set up the environment for any DDS vendors that support was built for) and then run a talker:\n. ~/ros2_ws/install/setup.bash\nros2 run demo_nodes_cpp talker\n\n\nIn another terminal source the setup file and then run a listener:\n. ~/ros2_ws/install/setup.bash\nros2 run demo_nodes_cpp listener\n\n\nYou should see the talker saying that it’s Publishing messages and the listener saying I heard those messages.\nHooray!\n\n\nAlternative DDS sources¶\nThe demos will attempt to build against any detected DDS vendor.\nThe only bundled vendor is eProsima’s Fast RTPS, which is included in the default set of sources for ROS 2.\nIf you would like to switch out the vendor below are the instructions.\nWhen you run the build make sure that your chosen DDS vendor(s) are exposed in your environment.\nWhen multiple vendors are present, you can choose the used RMW implementation by setting the the environment variable RMW_IMPLEMENTATION to the package providing the RMW implementation.\nSee Working with multiple RMW implementations for more details.\n\nAdlink OpenSplice¶\nROS 2 Dashing Diademata supports OpenSplice 6.9.\nTo install OpenSplice, download the latest supported release from https://github.com/ADLINK-IST/opensplice/releases and unpack it.\nSource the release.com file provided to set up the environment before building your ROS 2 workspace, e.g.:\nsource <path_to_opensplice>/x86_64.darwin10_clang/release.com\n\n\n\n\nRTI Connext (5.3)¶\nTo use RTI Connext you will need to have obtained a license from RTI.\nYou can install the OS X package of Connext version 5.3 provided by RTI from their downloads page.\nYou also need a Java runtime installed to run the RTI code generator, which you can get here.\nAfter installing, run RTI launcher and point it to your license file.\nSource the setup file to set the NDDSHOME environment variable before building your workspace.\nThe setup file and path will depend on your macOS version.\n# macOS 10.12 Sierra\nsource /Applications/rti_connext_dds-5.3.1/resource/scripts/rtisetenv_x64Darwin16clang8.0.bash\n# macOS 10.13 High Sierra\nsource /Applications/rti_connext_dds-5.3.1/resource/scripts/rtisetenv_x64Darwin17clang9.0.bash\n\n\nYou may need to increase shared memory resources following https://community.rti.com/kb/osx510.\nIf you want to install the Connext DDS-Security plugins please refer to this page.\n\n\n\nTroubleshooting¶\n\nSegmentation Fault when using pyenv¶\npyenv seems to default to building Python with .a files, but that causes issues with rclpy, so it’s recommended to build Python with Frameworks enabled on macOS when using pyenv:\nhttps://github.com/pyenv/pyenv/wiki#how-to-build-cpython-with-framework-support-on-os-x\n\n\nLibrary not loaded; image not found¶\nIf you are seeing library loading issues at runtime (either running tests or running nodes), such as the following:\nImportError: dlopen(.../ros2_install/ros2-osx/lib/python3.7/site-packages/rclpy/_rclpy.cpython-37m-darwin.so, 2): Library not loaded: @rpath/librcl_interfaces__rosidl_typesupport_c.dylib\n  Referenced from: .../ros2_install/ros2-osx/lib/python3.7/site-packages/rclpy/_rclpy.cpython-37m-darwin.so\n  Reason: image not found\n\n\nthen you probably have System Integrity Protection enabled.\nSee “Disable System Integrity Protection (SIP)” above for how instructions on how to disable it.\n\n\nQt build errors e.g. unknown type name 'Q_ENUM'¶\nIf you see build errors related to Qt, e.g.:\nIn file included from /usr/local/opt/qt/lib/QtGui.framework/Headers/qguiapplication.h:46:\n/usr/local/opt/qt/lib/QtGui.framework/Headers/qinputmethod.h:87:5: error:\n      unknown type name 'Q_ENUM'\n    Q_ENUM(Action)\n    ^\n\n\nyou may be using qt4 instead of qt5: see https://github.com/ros2/ros2/issues/441\n\n\nMissing symbol when opencv (and therefore libjpeg, libtiff, and libpng) are installed with Homebrew¶\nIf you have opencv installed you might get this:\ndyld: Symbol not found: __cg_jpeg_resync_to_restart\n  Referenced from: /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\n  Expected in: /usr/local/lib/libJPEG.dylib\n in /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\n/bin/sh: line 1: 25274 Trace/BPT trap: 5       /usr/local/bin/cmake\n\n\nIf so, to build you’ll have to do this:\n$ brew unlink libpng libtiff libjpeg\n\n\nBut this will break opencv, so you’ll also need to update it to continue working:\n$ sudo install_name_tool -change /usr/local/lib/libjpeg.8.dylib /usr/local/opt/jpeg/lib/libjpeg.8.dylib /usr/local/lib/libopencv_highgui.2.4.dylib\n$ sudo install_name_tool -change /usr/local/lib/libpng16.16.dylib /usr/local/opt/libpng/lib/libpng16.16.dylib /usr/local/lib/libopencv_highgui.2.4.dylib\n$ sudo install_name_tool -change /usr/local/lib/libtiff.5.dylib /usr/local/opt/libtiff/lib/libtiff.5.dylib /usr/local/lib/libopencv_highgui.2.4.dylib\n$ sudo install_name_tool -change /usr/local/lib/libjpeg.8.dylib /usr/local/opt/jpeg/lib/libjpeg.8.dylib /usr/local/Cellar/libtiff/4.0.4/lib/libtiff.5.dylib\n\n\nThe first command is necessary to avoid things built against the system libjpeg (etc.) from getting the version in /usr/local/lib.\nThe others are updating things built by Homebrew so that they can find the version of libjpeg (etc.) without having them in /usr/local/lib.\n\n\n\n"},{"id":83,"url":"/doc/ros2/Installation/Crystal/OSX-Development-Setup/","title":"Building ROS 2 on OS X","content":"\nBuilding ROS 2 on OS X¶\n\nTable of Contents\n\nSystem requirements\nInstall prerequisites\nDisable System Integrity Protection (SIP)\nGet the ROS 2 code\nInstall additional DDS vendors (optional)\nBuild the ROS 2 code\nTry some examples\nAlternative DDS sources\n\nAdlink OpenSplice\nRTI Connext (5.3)\n\n\nTroubleshooting\n\nSegmentation Fault when using pyenv\nLibrary not loaded; image not found\nQt build errors e.g. unknown type name 'Q_ENUM'\nMissing symbol when opencv (and therefore libjpeg, libtiff, and libpng) are installed with Homebrew\n\n\n\n\n\nSystem requirements¶\nWe support OS X 10.12.x.\nHowever, some new versions like 10.13.x and some older versions like 10.11.x and 10.10.x are known to work as well.\n\n\nInstall prerequisites¶\nYou need the following things installed to build ROS 2:\n\nXcode\n\nIf you don’t already have it installed, install Xcode and the Command Line Tools:\nxcode-select --install\n\n\n\n\n\nbrew (needed to install more stuff; you probably already have this):\n\nFollow installation instructions at http://brew.sh/\nOptional: Check that brew is happy with your system configuration by running:\nbrew doctor\n\n\nFix any problems that it identifies.\n\n\n\nUse brew to install more stuff:\nbrew install cmake cppcheck eigen pcre poco python3 tinyxml wget\n\n# install dependencies for Fast-RTPS if you are using it\nbrew install asio tinyxml2\n\nbrew install opencv\n\n# install dependencies for rcl_logging_log4cxx\nbrew install log4cxx\n\n\n\nInstall rviz dependencies\n# install dependencies for Rviz\nbrew install qt freetype assimp\n\n# Add the Qt directory to the PATH and CMAKE_PREFIX_PATH\nexport CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:/usr/local/opt/qt\nexport PATH=$PATH:/usr/local/opt/qt/bin\n\n\n\nUse python3 -m pip (just pip may install Python3 or Python2) to install more stuff:\npython3 -m pip install argcomplete catkin_pkg colcon-common-extensions coverage empy flake8 flake8-blind-except flake8-builtins flake8-class-newline flake8-comprehensions flake8-deprecated flake8-docstrings flake8-import-order flake8-quotes lark-parser mock nose pep8 pydocstyle pyparsing setuptools vcstool\n\n\n\nOptional: if you want to build the ROS 1<->2 bridge, then you must also install ROS 1:\n\nStart with the normal install instructions: http://wiki.ros.org/kinetic/Installation/OSX/Homebrew/Source\nWhen you get to the step where you call rosinstall_generator to get the source code, here’s an alternate invocation that brings in just the minimum required to produce a useful bridge:\nrosinstall_generator catkin common_msgs roscpp rosmsg --rosdistro kinetic --deps --wet-only --tar > kinetic-ros2-bridge-deps.rosinstall\nwstool init -j8 src kinetic-ros2-bridge-deps.rosinstall\n\n\nOtherwise, just follow the normal instructions, then source the resulting install_isolated/setup.bash before proceeding here to build ROS 2.\n\n\n\n\n\n\nDisable System Integrity Protection (SIP)¶\nOS X versions >=10.11 have System Integrity Protection enabled by default.\nSo that SIP doesn’t prevent processes from inheriting dynamic linker environment variables, such as DYLD_LIBRARY_PATH, you’ll need to disable it following these instructions.\n\n\nGet the ROS 2 code¶\nCreate a workspace and clone all repos:\nmkdir -p ~/ros2_ws/src\ncd ~/ros2_ws\nwget https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos\nvcs import src < ros2.repos\n\n\n\nNote\nIf you want to get all of the latest bug fixes then you can try the “tip” of development by replacing release-latest in the url above with master. The release-latest is preferred by default because it goes through more rigorous testing on release than changes to master do. See also Maintaining a Source Checkout.\n\n\n\nInstall additional DDS vendors (optional)¶\nROS 2 builds on top of DDS.\nIt is compatible with multiple DDS or RTPS (the DDS wire protocol) vendors.\nThe repositories you downloaded for ROS 2 includes eProsima’s Fast RTPS, which is the only bundled vendor.\nIf you would like to use one of the other vendors you will need to install their software separately before building.\nThe ROS 2 build will automatically build support for vendors that have been installed and sourced correctly.\nBy default we include eProsima’s FastRTPS in the workspace and it is the default middleware.\nDetailed instructions for installing other DDS vendors are provided in the “Alternative DDS sources” section below.\n\n\nBuild the ROS 2 code¶\nNote: if you are trying to build the ROS 1 <-> ROS 2 bridge, follow instead these modified instructions.\nRun the colcon tool to build everything (more on using colcon in this tutorial):\ncd ~/ros2_ws/\ncolcon build --symlink-install\n\n\n\n\nTry some examples¶\nIn a clean new terminal, source the setup file (this will automatically set up the environment for any DDS vendors that support was built for) and then run a talker:\n. ~/ros2_ws/install/setup.bash\nros2 run demo_nodes_cpp talker\n\n\nIn another terminal source the setup file and then run a listener:\n. ~/ros2_ws/install/setup.bash\nros2 run demo_nodes_cpp listener\n\n\nYou should see the talker saying that it’s Publishing messages and the listener saying I heard those messages.\nHooray!\n\n\nAlternative DDS sources¶\nThe demos will attempt to build against any detected DDS vendor.\nThe only bundled vendor is eProsima’s Fast RTPS, which is included in the default set of sources for ROS 2.\nIf you would like to switch out the vendor below are the instructions.\nWhen you run the build make sure that your chosen DDS vendor(s) are exposed in your environment.\nWhen multiple vendors are present, you can choose the used RMW implementation by setting the the environment variable RMW_IMPLEMENTATION to the package providing the RMW implementation.\nSee Working with multiple RMW implementations for more details.\n\nAdlink OpenSplice¶\nROS 2 Crystal Clemmys supports OpenSplice 6.9.\nROS 2 Bouncy Bolson supports OpenSplice 6.7.\nTo install OpenSplice, download the latest supported release from https://github.com/ADLINK-IST/opensplice/releases and unpack it.\nSource the release.com file provided to set up the environment before building your ROS 2 workspace, e.g.:\nsource <path_to_opensplice>/x86_64.darwin10_clang/release.com\n\n\n\n\nRTI Connext (5.3)¶\nTo use RTI Connext you will need to have obtained a license from RTI.\nYou can install the OS X package of Connext version 5.3 provided by RTI from their downloads page.\nYou also need a Java runtime installed to run the RTI code generator, which you can get here.\nAfter installing, run RTI launcher and point it to your license file.\nSource the setup file to set the NDDSHOME environment variable before building your workspace.\nThe setup file and path will depend on your macOS version.\n# macOS 10.12 Sierra\nsource /Applications/rti_connext_dds-5.3.1/resource/scripts/rtisetenv_x64Darwin16clang8.0.bash\n# macOS 10.13 High Sierra\nsource /Applications/rti_connext_dds-5.3.1/resource/scripts/rtisetenv_x64Darwin17clang9.0.bash\n\n\nYou may need to increase shared memory resources following https://community.rti.com/kb/osx510.\nIf you want to install the Connext DDS-Security plugins please refer to this page.\n\n\n\nTroubleshooting¶\n\nSegmentation Fault when using pyenv¶\npyenv seems to default to building Python with .a files, but that causes issues with rclpy, so it’s recommended to build Python with Frameworks enabled on macOS when using pyenv:\nhttps://github.com/pyenv/pyenv/wiki#how-to-build-cpython-with-framework-support-on-os-x\n\n\nLibrary not loaded; image not found¶\nIf you are seeing library loading issues at runtime (either running tests or running nodes), such as the following:\nImportError: dlopen(.../ros2_install/ros2-osx/lib/python3.7/site-packages/rclpy/_rclpy.cpython-37m-darwin.so, 2): Library not loaded: @rpath/librcl_interfaces__rosidl_typesupport_c.dylib\n  Referenced from: .../ros2_install/ros2-osx/lib/python3.7/site-packages/rclpy/_rclpy.cpython-37m-darwin.so\n  Reason: image not found\n\n\nthen you probably have System Integrity Protection enabled.\nSee “Disable System Integrity Protection (SIP)” above for how instructions on how to disable it.\n\n\nQt build errors e.g. unknown type name 'Q_ENUM'¶\nIf you see build errors related to Qt, e.g.:\nIn file included from /usr/local/opt/qt/lib/QtGui.framework/Headers/qguiapplication.h:46:\n/usr/local/opt/qt/lib/QtGui.framework/Headers/qinputmethod.h:87:5: error:\n      unknown type name 'Q_ENUM'\n    Q_ENUM(Action)\n    ^\n\n\nyou may be using qt4 instead of qt5: see https://github.com/ros2/ros2/issues/441\n\n\nMissing symbol when opencv (and therefore libjpeg, libtiff, and libpng) are installed with Homebrew¶\nIf you have opencv installed you might get this:\ndyld: Symbol not found: __cg_jpeg_resync_to_restart\n  Referenced from: /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\n  Expected in: /usr/local/lib/libJPEG.dylib\n in /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\n/bin/sh: line 1: 25274 Trace/BPT trap: 5       /usr/local/bin/cmake\n\n\nIf so, to build you’ll have to do this:\n$ brew unlink libpng libtiff libjpeg\n\n\nBut this will break opencv, so you’ll also need to update it to continue working:\n$ sudo install_name_tool -change /usr/local/lib/libjpeg.8.dylib /usr/local/opt/jpeg/lib/libjpeg.8.dylib /usr/local/lib/libopencv_highgui.2.4.dylib\n$ sudo install_name_tool -change /usr/local/lib/libpng16.16.dylib /usr/local/opt/libpng/lib/libpng16.16.dylib /usr/local/lib/libopencv_highgui.2.4.dylib\n$ sudo install_name_tool -change /usr/local/lib/libtiff.5.dylib /usr/local/opt/libtiff/lib/libtiff.5.dylib /usr/local/lib/libopencv_highgui.2.4.dylib\n$ sudo install_name_tool -change /usr/local/lib/libjpeg.8.dylib /usr/local/opt/jpeg/lib/libjpeg.8.dylib /usr/local/Cellar/libtiff/4.0.4/lib/libtiff.5.dylib\n\n\nThe first command is necessary to avoid things built against the system libjpeg (etc.) from getting the version in /usr/local/lib.\nThe others are updating things built by Homebrew so that they can find the version of libjpeg (etc.) without having them in /usr/local/lib.\n\n\n\n"},{"id":84,"url":"/doc/ros2/Installation/Dashing/Windows-Development-Setup/","title":"Building ROS 2 on Windows","content":"\nBuilding ROS 2 on Windows¶\n\nTable of Contents\n\nPrerequisites\n\nAdditional Prerequisites\n\n\nInstalling Developer Tools\nInstall dependencies\n\nInstall Qt5\n\n\nGetting the Source Code\nGetting a DDS Vendor\n\nAdlink OpenSplice\nRTI Connext 5.3\n\n\nBuilding the ROS 2 Code\nTesting and Running\nAlternative DDS Sources\nTroubleshooting\n\nCMake error setting modification time\n260 Character Path Limit\nCMake Packages Unable to Find asio, tinyxml2, tinyxml, eigen, or log4cxx\npatch.exe Opens a New Command Window and Asks for Administrator\n\n\nExtra stuff for Debug mode\n\n\nThis guide is about how to setup a development environment for ROS2 on Windows.\n\nPrerequisites¶\nFirst follow the steps for Installing Prerequisites on the Binary Installation page.\nStop and return here when you reach the “Downloading ROS 2” section.\n\nAdditional Prerequisites¶\nWhen building from source you’ll need a few additional prerequisites installed.\n\nInstall Additional Prerequisites from Chocolatey¶\nFirst install git:\n> choco install -y git\n\n\nYou will need to append the Git cmd folder C:\\Program Files\\Git\\cmd to the PATH (you can do this by clicking the Windows icon, typing “Environment Variables”, then clicking on “Edit the system environment variables”.\nIn the resulting dialog, click “Environment Variables”, the click “Path” on the bottom pane, then click “Edit” and add the path).\nThen install patch:\n> choco install -y patch\n\n\nYou may need to close the cmd prompt and open a new one, but at this point you should be able to run git, python, cmake, and patch.exe --version.\n\n\n\n\nInstalling Developer Tools¶\nNow we are ready to install some our tools that we use to help in developing ROS 2.\nLet’s start with vcstool:\n> pip install -U vcstool\n\n\nYou can test it out by just running vcs (you should be able to do this in the same cmd prompt).\nNext, install colcon:\n> pip install -U colcon-common-extensions\n\n\nYou can test it out by just running colcon (you should be able to do this in the same cmd prompt).\nAlso, you should install curl:\n> choco install -y curl\n\n\n\n\nInstall dependencies¶\nNext install the latest version of setuptools and pip:\n> <PATH_TO_PYTHON_EXECUTABLE> -m pip install -U setuptools pip\n\n\nWhere PATH_TO_PYTHON_EXECUTABLE looks like: c:\\python37\\python.exe\nThen you can continue installing other Python dependencies:\n> pip install -U catkin_pkg EmPy lark-parser lxml numpy pyparsing pyyaml\n\n\nNext install testing tools like pytest and others:\n> pip install -U pytest coverage mock\n\n\nNext install linters and checkers like flake8 and others:\n> pip install -U flake8 flake8-blind-except flake8-builtins flake8-class-newline flake8-comprehensions flake8-deprecated flake8-docstrings flake8-import-order flake8-quotes pep8 pydocstyle\n\n\nNext install cppcheck:\n> choco install -y cppcheck\n\n\nYou will need to add C:\\Program Files\\Cppcheck to the PATH.\nNext install xmllint:\n\nDownload the 64 bit binary archives of libxml2 (and its dependencies iconv and zlib) from https://www.zlatkovic.com/projects/libxml/\nUnpack all archives into e.g. C:\\xmllint\nAdd C:\\xmllint\\bin to the PATH.\n\n\nInstall Qt5¶\nThis section is only required if you are building rviz, but it comes with our default set of sources, so if you don’t know, then assume you are building it.\nFirst get the installer from Qt’s website:\nhttps://www.qt.io/download\nSelect the Open Source version and then the Qt Online Installer for Windows.\nRun the installer and install Qt5.\nWe recommend you install it to the default location of C:\\Qt, but if you choose somewhere else, make sure to update the paths below accordingly.\nWhen selecting components to install, the only thing you absolutely need for bouncy and later is the appropriate MSVC 64-bit component under the Qt -> Qt 5.10.0 tree.\nWe’re using 5.10.0 as of the writing of this document and that’s what we recommend since that’s all we test on Windows, but later version will probably work too.\nFor bouncy and later, be sure to select MSVC 2017 64-bit. For ardent use MSVC 2015 64-bit.\nAfter that, the default settings are fine.\nFinally, set the Qt5_DIR environment variable in the cmd.exe where you intend to build so that CMake can find it:\n> set Qt5_DIR=C:\\Qt\\5.10.0\\msvc2017_64\n: You could set it permanently with ``setx -m Qt5_DIR C:\\Qt\\5.10.0\\msvc2017_64`` instead, but that requires Administrator.\n\n\nNote, this path might change based on which MSVC version you’re using or if you installed it to a different directory.\n\nRQt dependencies¶\n> pip install -U pydot PyQt5\n\n\n\n\n\n\nGetting the Source Code¶\nNow that we have the development tools we can get the ROS 2 source code.\nFirst setup a development folder, I use C:\\dev\\ros2:\n> md \\dev\\ros2\\src\n> cd \\dev\\ros2\n\n\nGet the ros2.repos file which defines the repositories to clone from:\n# CMD\n> curl -sk https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos -o ros2.repos\n\n# PowerShell\n> curl https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos -o ros2.repos\n\n\n\nNote: if you want to get all of the latest bug fixes then you can try the “tip” of development by replacing release-latest in the URL above with master. The release-latest is preferred by default because it goes through more rigorous testing on release than changes to master do. See also Maintaining a Source Checkout.\n\nNext you can use vcs to import the repositories listed in the ros2.repos file:\n# CMD\n> vcs import src < ros2.repos\n\n# PowerShell\n> vcs import --input ros2.repos src\n\n\n\n\nGetting a DDS Vendor¶\nYou’ll also need a DDS Vendor available for ROS to build against.\nThere is currently support for eProsima FastRTPS, Adlink’s OpenSplice, and RTI’s Connext DDS.\nThe source distribution of ROS 2 includes FastRTPS, so it will always build unless explicitly ignored.\n\nAdlink OpenSplice¶\nIf you would like to also build against OpenSplice, you will need to first download the latest version of OpenSplice.\nThen run something like the following command before building ROS 2, to set up the OpenSplice environment:\ncall \"C:\\opensplice69\\HDE\\x86_64.win64\\release.bat\"\n\n\nwhere the exact paths may need to be slightly altered depending on where you selected to install OpenSplice.\n\n\nRTI Connext 5.3¶\nIf you would like to also build against RTI Connext, you will need to first visit the RTI website and obtain a license (evaluation or purchased) for RTI Connext DDS as well as the installer via their downloads page.\nAfter installing, use the RTI Launcher to load your license file.\nThen before building ROS 2, set up the Connext environment:\ncall \"C:\\Program Files\\rti_connext_dds-5.3.1\\resource\\scripts\\rtisetenv_x64Win64VS2017.bat\"\n\n\nNote that this path might need to be slightly altered depending on where you selected to install RTI Connext DDS.\nThe path above is the current default path as of version 5.3.1, but will change as the version numbers increment in the future.\nIf you want to install the Connext DDS-Security plugins please refer to this page.\nIf you don’t install any additional DDS vendors, ROS 2 will default to using eProsima’s Fast-RTPS as the middleware.\n\n\n\nBuilding the ROS 2 Code¶\nTo build ROS 2 you will need a Visual Studio Command Prompt (usually titled “x64 Native Tools Command Prompt for VS 2017” for bouncy and later or “x64 Native Tools Command Prompt for VS 2015” for ardent and earlier) running as Administrator.\nFastRTPS is bundled with the ROS 2 source and will always be built unless you put an AMENT_IGNORE file in the src\\eProsima folder.\nTo build the \\dev\\ros2 folder tree:\n> colcon build --merge-install\n\n\nNote, we’re using --merge-install here to avoid a PATH variable that is too long at the end of the build. If you’re adapting these instructions to build a smaller workspace then you might be able to use the default behavior which is isolated install, i.e. where each package is installed to a different folder.\nNote, if you are doing a debug build use python_d path\\to\\colcon_executable colcon.\nSee Extra stuff for debug mode for more info on running Python code in debug builds on Windows.\n\n\nTesting and Running¶\nNote that the first time you run any executable you will have to allow access to the network through a Windows Firewall popup.\nYou can run the tests using this command:\n> colcon test\n\n\nAfterwards you can get a summary of the tests using this command:\n> colcon test-result\n\n\nTo run the examples, first open a clean new cmd.exe and set up the workspace.\nThis is done by sourcing the local_setup.bat file, which will automatically set up the environment for any DDS vendors that support was built for.\nThen execute the examples, e.g.:\n> call install\\local_setup.bat\n> ros2 run demo_nodes_py talker\n\n\nIn a separate shell you can do the same, but instead run the listener:\n> call install\\local_setup.bat\n> ros2 run demo_nodes_py listener\n\n\nFor more explanations see the Python Programming demo or other tutorials.\nNote: it is not recommended to build in the same cmd prompt that you’ve sourced the local_setup.bat.\n\n\nAlternative DDS Sources¶\nThe demos will attempt to build against any detected DDS vendor.\nThe only bundled vendor is eProsima’s Fast RTPS, which is included in the default set of sources for ROS 2.\nTo build for other vendors, make sure that your chosen DDS vendor(s) are exposed in your environment when you run the build.\nIf you would like to change which vendor is being used see: Working with Multiple RMW Implementations\n\n\nTroubleshooting¶\n\nCMake error setting modification time¶\nIf you run into the CMake error file INSTALL cannot set modification time on ... when installing files it is likely that an anti virus software or Windows Defender are interfering with the build. E.g. for Windows Defender you can list the workspace location to be excluded to prevent it from scanning those files.\n\n\n260 Character Path Limit¶\nThe input line is too long.\nThe syntax of the command is incorrect.\n\n\nYou may see path length limit errors when building your own libraries, or maybe even in this guide as ROS2 matures.\nRun regedit.exe, navigate to Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem, and set LongPathsEnabled to 0x00000001 (1).\nHit the windows key and type Edit Group Policy. Navigate to Local Computer Policy > Computer Configuration > Administrative Templates > System > Filesystem. Right click Enable Win32 long paths, click Edit. In the dialog, select Enabled and click OK.\nClose and open your terminal to reset the environment and try building again.\n\n\nCMake Packages Unable to Find asio, tinyxml2, tinyxml, eigen, or log4cxx¶\nWe’ve seen, but been unable to identify the root cause, that sometimes the chocolatey packages for asio, tinyxml2, etc. do not add important registry entries and that will cause CMake to be unable to find them when building ROS 2.\nIt seems that uninstalling the chocolatey packages (with -n if the uninstall fails the first time) and then reinstalling them will fix the issue.\n\n\npatch.exe Opens a New Command Window and Asks for Administrator¶\nThis will also cause the build of packages which need to use patch to fail, even you allow it to use administrator rights.\nThe solution, for now, is to make sure you’re building in a Visual Studio command prompt which has been run as administrator. On some machines canceling the prompt without selecting “Yes” will also work.\n\n\n\nExtra stuff for Debug mode¶\nIf you want to be able to run all the tests in Debug mode, you’ll need to install a few more things:\n\nTo be able to extract the Python source tarball, you can use PeaZip:\n\n> choco install -y peazip\n\n\n\nYou’ll also need SVN, since some of the Python source-build dependencies are checked out via SVN:\n\n> choco install -y svn hg\n\n\n\nYou’ll need to quit and restart the command prompt after installing the above.\nGet and extract the Python 3.7.3 source from the tgz:\n\nhttps://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz\nTo keep these instructions concise, please extract it to C:\\dev\\Python-3.7.3\n\n\nNow, build the Python source in debug mode from a Visual Studio command prompt:\n\n> cd C:\\dev\\Python-3.7.3\\PCbuild\n> get_externals.bat\n> build.bat -p x64 -d\n\n\n\nFinally, copy the build products into the Python37 installation directories, next to the Release-mode Python executable and DLL’s:\n\n> cd C:\\dev\\Python-3.7.3\\PCbuild\\amd64\n> copy python_d.exe C:\\Python37 /Y\n> copy python37_d.dll C:\\Python37 /Y\n> copy python3_d.dll C:\\Python37 /Y\n> copy python37_d.lib C:\\Python37\\libs /Y\n> copy python3_d.lib C:\\Python37\\libs /Y\n> for %I in (*_d.pyd) do copy %I C:\\Python37\\DLLs /Y\n\n\n\nNow, from a fresh command prompt, make sure that python_d works:\n\n> python_d\n> import _ctypes\n\n\n\nOnce you have verified the operation of python_d, it is necessary to reinstall a few dependencies with the debug-enabled libraries:\n\n> python_d -m pip install --force-reinstall https://github.com/ros2/ros2/releases/download/numpy-archives/numpy-1.16.2-cp37-cp37dm-win_amd64.whl\n> python_d -m pip install --force-reinstall https://github.com/ros2/ros2/releases/download/lxml-archives/lxml-4.3.2-cp37-cp37dm-win_amd64.whl\n\n\n\nTo verify the installation of these dependencies:\n\n> python_d\n# No import errors should appear when executing the following lines\n> from lxml import etree\n> import numpy\n\n\n\nWhen you wish to return to building release binaries, it is necessary to uninstall the debug variants and use the release variants:\n\n> python -m pip uninstall numpy lxml\n> python -m pip install numpy lxml\n\n\n\nTo create executables python scripts(.exe), python_d should be used to invoke colcon\n\n> python_d path\\to\\colcon_executable build\n\n\n\nHooray, you’re done!\n\n\n\n"}]